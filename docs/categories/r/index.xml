<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>RStudio AI Blog</title>
    <link>https://blogs.rstudio.com/tensorflow/</link>
    <atom:link href="https://blogs.rstudio.com/tensorflow/index.xml" rel="self" type="application/rss+xml"/>
    <description>News, concepts, and applications as regards deep learning, probabilistic computation, distributed computing and machine learning automation from R.
</description>
    <image>
      <title>RStudio AI Blog</title>
      <url>https://blogs.rstudio.com/tensorflow/images/favicon.png</url>
      <link>https://blogs.rstudio.com/tensorflow/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Mon, 02 Nov 2020 00:00:00 +0000</lastBuildDate>
    <item>
      <title>torch for tabular data</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-11-03-torch-tabular</link>
      <description>


&lt;p&gt;Machine learning on image-like data can be many things: fun (dogs vs. cats), societally useful (medical imaging), or societally harmful (surveillance). In comparison, tabular data – the bread and butter of data science – may seem more mundane.&lt;/p&gt;
&lt;p&gt;What’s more, if you’re particularly interested in deep learning (DL), and looking for the extra benefits to be gained from big data, big architectures, and big compute, you’re much more likely to build an impressive showcase on the former instead of the latter.&lt;/p&gt;
&lt;p&gt;So for tabular data, why not just go with random forests, or gradient boosting, or other classical methods? I can think of at least a few reasons to learn about DL for tabular data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Even if all your features are interval-scale or ordinal, thus requiring “just” some form of (not necessarily linear) regression, applying DL may result in performance benefits due to sophisticated optimization algorithms, activation functions, layer depth, and more (plus interactions of all of these).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If, in addition, there are categorical features, DL models may profit from &lt;em&gt;embedding&lt;/em&gt; those in continuous space, discovering similarities and relationships that go unnoticed in one-hot encoded representations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What if most features are numeric or categorical, but there’s also text in column F and an image in column G? With DL, different modalities can be worked on by different modules that feed their outputs into a common module, to take over from there.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="agenda"&gt;Agenda&lt;/h2&gt;
&lt;p&gt;In this introductory post, we keep the architecture straightforward. We don’t experiment with fancy optimizers or nonlinearities. Nor do we add in text or image processing. However, we do make use of embeddings, and pretty prominently at that. Thus from the above bullet list, we’ll shed a light on the second, while leaving the other two for future posts.&lt;/p&gt;
&lt;p&gt;In a nutshell, what we’ll see is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to create a custom &lt;em&gt;dataset&lt;/em&gt;, tailored to the specific data you have.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to handle a mix of numeric and categorical data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to extract continuous-space representations from the embedding modules.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dataset"&gt;Dataset&lt;/h2&gt;
&lt;p&gt;The dataset, &lt;a href="https://archive.ics.uci.edu/ml/datasets/Mushroom"&gt;Mushrooms&lt;/a&gt;, was chosen for its abundance of categorical columns. It is an unusual dataset to use in DL: It was designed for machine learning models to infer logical rules, as in: IF &lt;em&gt;a&lt;/em&gt; AND NOT &lt;em&gt;b&lt;/em&gt; OR &lt;em&gt;c&lt;/em&gt; […], then it’s an &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mushrooms are classified into two groups: edible and non-edible. The dataset description lists five possible rules with their resulting accuracies. While the least we want to go into here is the hotly debated topic of whether DL is suited to, or how it could be made more suited to rule learning, we’ll allow ourselves some curiosity and check out what happens if we successively remove all columns used to construct those five rules.&lt;/p&gt;
&lt;p&gt;Oh, and before you start copy-pasting: Here is the example in a &lt;a href="https://colab.research.google.com/drive/1bfyoD13YaLPLVcQVOLimv6vq9y4CKMM2?usp=sharing"&gt;Google Colaboratory notebook&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(torch)
library(purrr)
library(readr)
library(dplyr)
library(ggplot2)

download.file(
  &amp;quot;https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data&amp;quot;,
  destfile = &amp;quot;agaricus-lepiota.data&amp;quot;
)

mushroom_data &amp;lt;- read_csv(
  &amp;quot;agaricus-lepiota.data&amp;quot;,
  col_names = c(
    &amp;quot;poisonous&amp;quot;,
    &amp;quot;cap-shape&amp;quot;,
    &amp;quot;cap-surface&amp;quot;,
    &amp;quot;cap-color&amp;quot;,
    &amp;quot;bruises&amp;quot;,
    &amp;quot;odor&amp;quot;,
    &amp;quot;gill-attachment&amp;quot;,
    &amp;quot;gill-spacing&amp;quot;,
    &amp;quot;gill-size&amp;quot;,
    &amp;quot;gill-color&amp;quot;,
    &amp;quot;stalk-shape&amp;quot;,
    &amp;quot;stalk-root&amp;quot;,
    &amp;quot;stalk-surface-above-ring&amp;quot;,
    &amp;quot;stalk-surface-below-ring&amp;quot;,
    &amp;quot;stalk-color-above-ring&amp;quot;,
    &amp;quot;stalk-color-below-ring&amp;quot;,
    &amp;quot;veil-type&amp;quot;,
    &amp;quot;veil-color&amp;quot;,
    &amp;quot;ring-type&amp;quot;,
    &amp;quot;ring-number&amp;quot;,
    &amp;quot;spore-print-color&amp;quot;,
    &amp;quot;population&amp;quot;,
    &amp;quot;habitat&amp;quot;
  ),
  col_types = rep(&amp;quot;c&amp;quot;, 23) %&amp;gt;% paste(collapse = &amp;quot;&amp;quot;)
) %&amp;gt;%
  # can as well remove because there&amp;#39;s just 1 unique value
  select(-`veil-type`)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;torch&lt;/code&gt;, &lt;code&gt;dataset()&lt;/code&gt; creates an R6 class. As with most R6 classes, there will usually be a need for an &lt;code&gt;initialize()&lt;/code&gt; method. Below, we use &lt;code&gt;initialize()&lt;/code&gt; to preprocess the data and store it in convenient pieces. More on that in a minute. Prior to that, please note the two other methods a &lt;code&gt;dataset&lt;/code&gt; has to implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.getitem(i)&lt;/code&gt; . This is the whole purpose of a &lt;code&gt;dataset&lt;/code&gt;: Retrieve and return the observation located at some index it is asked for. Which index? That’s to be decided by the caller, a &lt;code&gt;dataloader&lt;/code&gt;. During training, usually we want to permute the order in which observations are used, while not caring about order in case of validation or test data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.length()&lt;/code&gt;. This method, again for use of a &lt;code&gt;dataloader&lt;/code&gt;, indicates how many observations there are.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our example, both methods are straightforward to implement. &lt;code&gt;.getitem(i)&lt;/code&gt; directly uses its argument to index into the data, and &lt;code&gt;.length()&lt;/code&gt; returns the number of observations:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mushroom_dataset &amp;lt;- dataset(
  name = &amp;quot;mushroom_dataset&amp;quot;,

  initialize = function(indices) {
    data &amp;lt;- self$prepare_mushroom_data(mushroom_data[indices, ])
    self$xcat &amp;lt;- data[[1]][[1]]
    self$xnum &amp;lt;- data[[1]][[2]]
    self$y &amp;lt;- data[[2]]
  },

  .getitem = function(i) {
    xcat &amp;lt;- self$xcat[i, ]
    xnum &amp;lt;- self$xnum[i, ]
    y &amp;lt;- self$y[i, ]
    
    list(x = list(xcat, xnum), y = y)
  },
  
  .length = function() {
    dim(self$y)[1]
  },
  
  prepare_mushroom_data = function(input) {
    
    input &amp;lt;- input %&amp;gt;%
      mutate(across(.fns = as.factor)) 
    
    target_col &amp;lt;- input$poisonous %&amp;gt;% 
      as.integer() %&amp;gt;%
      `-`(1) %&amp;gt;%
      as.matrix()
    
    categorical_cols &amp;lt;- input %&amp;gt;% 
      select(-poisonous) %&amp;gt;%
      select(where(function(x) nlevels(x) != 2)) %&amp;gt;%
      mutate(across(.fns = as.integer)) %&amp;gt;%
      as.matrix()

    numerical_cols &amp;lt;- input %&amp;gt;%
      select(-poisonous) %&amp;gt;%
      select(where(function(x) nlevels(x) == 2)) %&amp;gt;%
      mutate(across(.fns = as.integer)) %&amp;gt;%
      as.matrix()
    
    list(list(torch_tensor(categorical_cols), torch_tensor(numerical_cols)),
         torch_tensor(target_col))
  }
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As for data storage, there is a field for the target, &lt;code&gt;self$y&lt;/code&gt;, but instead of the expected &lt;code&gt;self$x&lt;/code&gt; we see separate fields for numerical features (&lt;code&gt;self$xnum&lt;/code&gt;) and categorical ones (&lt;code&gt;self$xcat&lt;/code&gt;). This is just for convenience: The latter will be passed into embedding modules, which require its inputs to be of type &lt;code&gt;torch_long()&lt;/code&gt;, as opposed to most other modules that, by default, work with &lt;code&gt;torch_float()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Accordingly, then, all &lt;code&gt;prepare_mushroom_data()&lt;/code&gt; does is break apart the data into those three parts.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Indispensable aside:&lt;/em&gt; In this dataset, really &lt;em&gt;all&lt;/em&gt; features happen to be categorical – it’s just that for some, there are but two types. Technically, we could just have treated them the same as the non-binary features. But since normally in DL, we just leave binary features the way they are, we use this as an occasion to show how to handle a mix of various data types.&lt;/p&gt;
&lt;p&gt;Our custom &lt;code&gt;dataset&lt;/code&gt; defined, we create instances for training and validation; each gets its companion &lt;code&gt;dataloader&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;train_indices &amp;lt;- sample(1:nrow(mushroom_data), size = floor(0.8 * nrow(mushroom_data)))
valid_indices &amp;lt;- setdiff(1:nrow(mushroom_data), train_indices)

train_ds &amp;lt;- mushroom_dataset(train_indices)
train_dl &amp;lt;- train_ds %&amp;gt;% dataloader(batch_size = 256, shuffle = TRUE)

valid_ds &amp;lt;- mushroom_dataset(valid_indices)
valid_dl &amp;lt;- valid_ds %&amp;gt;% dataloader(batch_size = 256, shuffle = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="model"&gt;Model&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;torch&lt;/code&gt;, how much you &lt;em&gt;modularize&lt;/em&gt; your models is up to you. Often, high degrees of modularization enhance readability and help with troubleshooting.&lt;/p&gt;
&lt;p&gt;Here we factor out the embedding functionality. An &lt;code&gt;embedding_module&lt;/code&gt;, to be passed the categorical features only, will call &lt;code&gt;torch&lt;/code&gt;’s &lt;code&gt;nn_embedding()&lt;/code&gt; on each of them:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;embedding_module &amp;lt;- nn_module(
  
  initialize = function(cardinalities) {
    self$embeddings = nn_module_list(lapply(cardinalities, function(x) nn_embedding(num_embeddings = x, embedding_dim = ceiling(x/2))))
  },
  
  forward = function(x) {
    embedded &amp;lt;- vector(mode = &amp;quot;list&amp;quot;, length = length(self$embeddings))
    for (i in 1:length(self$embeddings)) {
      embedded[[i]] &amp;lt;- self$embeddings[[i]](x[ , i])
    }
    torch_cat(embedded, dim = 2)
  }
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main model, when called, starts by embedding the categorical features, then appends the numerical input and continues processing:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;net &amp;lt;- nn_module(
  &amp;quot;mushroom_net&amp;quot;,

  initialize = function(cardinalities,
                        num_numerical,
                        fc1_dim,
                        fc2_dim) {
    self$embedder &amp;lt;- embedding_module(cardinalities)
    self$fc1 &amp;lt;- nn_linear(sum(map(cardinalities, function(x) ceiling(x/2)) %&amp;gt;% unlist()) + num_numerical, fc1_dim)
    self$fc2 &amp;lt;- nn_linear(fc1_dim, fc2_dim)
    self$output &amp;lt;- nn_linear(fc2_dim, 1)
  },

  forward = function(xcat, xnum) {
    embedded &amp;lt;- self$embedder(xcat)
    all &amp;lt;- torch_cat(list(embedded, xnum$to(dtype = torch_float())), dim = 2)
    all %&amp;gt;% self$fc1() %&amp;gt;%
      nnf_relu() %&amp;gt;%
      self$fc2() %&amp;gt;%
      self$output() %&amp;gt;%
      nnf_sigmoid()
  }
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now instantiate this model, passing in, on the one hand, output sizes for the linear layers, and on the other, feature cardinalities. The latter will be used by the embedding modules to determine their output sizes, following a simple rule “embed into a space of size half the number of input values”:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cardinalities &amp;lt;- map(
  mushroom_data[ , 2:ncol(mushroom_data)], compose(nlevels, as.factor)) %&amp;gt;%
  keep(function(x) x &amp;gt; 2) %&amp;gt;%
  unlist() %&amp;gt;%
  unname()

num_numerical &amp;lt;- ncol(mushroom_data) - length(cardinalities) - 1

fc1_dim &amp;lt;- 16
fc2_dim &amp;lt;- 16

model &amp;lt;- net(
  cardinalities,
  num_numerical,
  fc1_dim,
  fc2_dim
)

device &amp;lt;- if (cuda_is_available()) torch_device(&amp;quot;cuda:0&amp;quot;) else &amp;quot;cpu&amp;quot;

model &amp;lt;- model$to(device = device)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="training"&gt;Training&lt;/h2&gt;
&lt;p&gt;The training loop now is “business as usual”:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimizer &amp;lt;- optim_adam(model$parameters, lr = 0.1)

for (epoch in 1:20) {

  model$train()
  train_losses &amp;lt;- c()  

  for (b in enumerate(train_dl)) {
    optimizer$zero_grad()
    output &amp;lt;- model(b$x[[1]]$to(device = device), b$x[[2]]$to(device = device))
    loss &amp;lt;- nnf_binary_cross_entropy(output, b$y$to(dtype = torch_float(), device = device))
    loss$backward()
    optimizer$step()
    train_losses &amp;lt;- c(train_losses, loss$item())
  }

  model$eval()
  valid_losses &amp;lt;- c()

  for (b in enumerate(valid_dl)) {
    output &amp;lt;- model(b$x[[1]]$to(device = device), b$x[[2]]$to(device = device))
    loss &amp;lt;- nnf_binary_cross_entropy(output, b$y$to(dtype = torch_float(), device = device))
    valid_losses &amp;lt;- c(valid_losses, loss$item())
  }

  cat(sprintf(&amp;quot;Loss at epoch %d: training: %3f, validation: %3f\n&amp;quot;, epoch, mean(train_losses), mean(valid_losses)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Loss at epoch 1: training: 0.274634, validation: 0.111689
Loss at epoch 2: training: 0.057177, validation: 0.036074
Loss at epoch 3: training: 0.025018, validation: 0.016698
Loss at epoch 4: training: 0.010819, validation: 0.010996
Loss at epoch 5: training: 0.005467, validation: 0.002849
Loss at epoch 6: training: 0.002026, validation: 0.000959
Loss at epoch 7: training: 0.000458, validation: 0.000282
Loss at epoch 8: training: 0.000231, validation: 0.000190
Loss at epoch 9: training: 0.000172, validation: 0.000144
Loss at epoch 10: training: 0.000120, validation: 0.000110
Loss at epoch 11: training: 0.000098, validation: 0.000090
Loss at epoch 12: training: 0.000079, validation: 0.000074
Loss at epoch 13: training: 0.000066, validation: 0.000064
Loss at epoch 14: training: 0.000058, validation: 0.000055
Loss at epoch 15: training: 0.000052, validation: 0.000048
Loss at epoch 16: training: 0.000043, validation: 0.000042
Loss at epoch 17: training: 0.000038, validation: 0.000038
Loss at epoch 18: training: 0.000034, validation: 0.000034
Loss at epoch 19: training: 0.000032, validation: 0.000031
Loss at epoch 20: training: 0.000028, validation: 0.000027&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While loss on the validation set is still decreasing, we’ll soon see that the network has learned enough to obtain an accuracy of 100%.&lt;/p&gt;
&lt;h2 id="evaluation"&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;To check classification accuracy, we re-use the validation set, seeing how we haven’t employed it for tuning anyway.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model$eval()

test_dl &amp;lt;- valid_ds %&amp;gt;% dataloader(batch_size = valid_ds$.length(), shuffle = FALSE)
iter &amp;lt;- test_dl$.iter()
b &amp;lt;- iter$.next()

output &amp;lt;- model(b$x[[1]]$to(device = device), b$x[[2]]$to(device = device))
preds &amp;lt;- output$to(device = &amp;quot;cpu&amp;quot;) %&amp;gt;% as.array()
preds &amp;lt;- ifelse(preds &amp;gt; 0.5, 1, 0)

comp_df &amp;lt;- data.frame(preds = preds, y = b[[2]] %&amp;gt;% as_array())
num_correct &amp;lt;- sum(comp_df$preds == comp_df$y)
num_total &amp;lt;- nrow(comp_df)
accuracy &amp;lt;- num_correct/num_total
accuracy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew. No embarrassing failure for the DL approach on a task where straightforward rules are sufficient. Plus, we’ve really been parsimonious as to network size.&lt;/p&gt;
&lt;p&gt;Before concluding with an inspection of the learned embeddings, let’s have some fun obscuring things.&lt;/p&gt;
&lt;h2 id="making-the-task-harder"&gt;Making the task harder&lt;/h2&gt;
&lt;p&gt;The following rules (with accompanying accuracies) are reported in the dataset description.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Disjunctive rules for poisonous mushrooms, from most general
    to most specific:

    P_1) odor=NOT(almond.OR.anise.OR.none)
         120 poisonous cases missed, 98.52% accuracy

    P_2) spore-print-color=green
         48 cases missed, 99.41% accuracy
         
    P_3) odor=none.AND.stalk-surface-below-ring=scaly.AND.
              (stalk-color-above-ring=NOT.brown) 
         8 cases missed, 99.90% accuracy
         
    P_4) habitat=leaves.AND.cap-color=white
             100% accuracy     

    Rule P_4) may also be

    P_4&amp;#39;) population=clustered.AND.cap_color=white

    These rule involve 6 attributes (out of 22). &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evidently, there’s no distinction being made between training and test sets; but we’ll stay with our 80:20 split anyway. We’ll successively remove all mentioned attributes, starting with the three that enabled 100% accuracy, and continuing our way up. Here are the results I obtained seeding the random number generator like so:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;torch_manual_seed(777)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width="90%" /&gt;
&lt;col width="9%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th align="left"&gt;without&lt;/th&gt;
&lt;th align="right"&gt;accuracy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td align="left"&gt;&lt;code&gt;cap-color, population, habitat&lt;/code&gt;&lt;/td&gt;
&lt;td align="right"&gt;0.9938&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td align="left"&gt;&lt;code&gt;cap-color, population, habitat, stalk-surface-below-ring, stalk-color-above-ring&lt;/code&gt;&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td align="left"&gt;&lt;code&gt;cap-color, population, habitat, stalk-surface-below-ring, stalk-color-above-ring, spore-print-color&lt;/code&gt;&lt;/td&gt;
&lt;td align="right"&gt;0.9994&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td align="left"&gt;&lt;code&gt;cap-color, population, habitat, stalk-surface-below-ring, stalk-color-above-ring, spore-print-color, odor&lt;/code&gt;&lt;/td&gt;
&lt;td align="right"&gt;0.9526&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Still 95% correct … While experiments like this are fun, it looks like they can also tell us something serious: Imagine the case of so-called “debiasing” by removing features like race, gender, or income. How many proxy variables may still be left that allow for inferring the masked attributes?&lt;/p&gt;
&lt;h2 id="a-look-at-the-hidden-representations"&gt;A look at the hidden representations&lt;/h2&gt;
&lt;p&gt;Looking at the weight matrix of an embedding module, what we see are the learned representations of a feature’s values. The first categorical column was &lt;code&gt;cap-shape&lt;/code&gt;; let’s extract its corresponding embeddings:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;embedding_weights &amp;lt;- vector(mode = &amp;quot;list&amp;quot;)
for (i in 1: length(model$embedder$embeddings)) {
  embedding_weights[[i]] &amp;lt;- model$embedder$embeddings[[i]]$parameters$weight$to(device = &amp;quot;cpu&amp;quot;)
}

cap_shape_repr &amp;lt;- embedding_weights[[1]]
cap_shape_repr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor
-0.0025 -0.1271  1.8077
-0.2367 -2.6165 -0.3363
-0.5264 -0.9455 -0.6702
 0.3057 -1.8139  0.3762
-0.8583 -0.7752  1.0954
 0.2740 -0.7513  0.4879
[ CPUFloatType{6,3} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number of columns is three, since that’s what we chose when creating the embedding layer. The number of rows is six, matching the number of available categories. We may look up per-feature categories in the dataset description (&lt;em&gt;agaricus-lepiota.names&lt;/em&gt;):&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cap_shapes &amp;lt;- c(&amp;quot;bell&amp;quot;, &amp;quot;conical&amp;quot;, &amp;quot;convex&amp;quot;, &amp;quot;flat&amp;quot;, &amp;quot;knobbed&amp;quot;, &amp;quot;sunken&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For visualization, it’s convenient to do principal components analysis (but there are other options, like t-SNE). Here are the six cap shapes in two-dimensional space:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pca &amp;lt;- prcomp(cap_shape_repr, center = TRUE, scale. = TRUE, rank = 2)$x[, c(&amp;quot;PC1&amp;quot;, &amp;quot;PC2&amp;quot;)]

pca %&amp;gt;%
  as.data.frame() %&amp;gt;%
  mutate(class = cap_shapes) %&amp;gt;%
  ggplot(aes(x = PC1, y = PC2)) +
  geom_point() +
  geom_label_repel(aes(label = class)) + 
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
  theme(aspect.ratio = 1) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://blogs.rstudio.com/tensorflow//posts/2020-11-03-torch-tabular/images/cap-shape.png" width="414" /&gt;&lt;/p&gt;
&lt;p&gt;Naturally, how interesting you find the results depends on how much you care about the hidden representation of a variable. Analyses like these may quickly turn into an activity where extreme caution is to be applied, as any biases in the data will immediately translate into biased representations. Moreover, reduction to two-dimensional space may or may not be adequate.&lt;/p&gt;
&lt;p&gt;This concludes our introduction to &lt;code&gt;torch&lt;/code&gt; for tabular data. While the conceptual focus was on categorical features, and how to make use of them in combination with numerical ones, we’ve taken care to also provide background on something that will come up time and again: defining a &lt;code&gt;dataset&lt;/code&gt; tailored to the task at hand.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">a8004a0d82a0fec874811441db208cbd</distill:md5>
      <category>Torch</category>
      <category>R</category>
      <category>Tabular Data</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-11-03-torch-tabular</guid>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-11-03-torch-tabular/images/preview.jpeg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Classifying images with torch</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-10-19-torch-image-classification</link>
      <description>


&lt;p&gt;In recent posts, we’ve been exploring essential &lt;code&gt;torch&lt;/code&gt; functionality: &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-01-torch-network-from-scratch/"&gt;tensors&lt;/a&gt;, the sine qua non of every deep learning framework; &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-05-torch-network-with-autograd"&gt;autograd&lt;/a&gt;, &lt;code&gt;torch&lt;/code&gt;’s implementation of reverse-mode automatic differentiation; &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-07-torch-modules"&gt;modules&lt;/a&gt;, composable building blocks of neural networks; and &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-09-torch-optim/"&gt;optimizers&lt;/a&gt;, the – well – optimization algorithms that &lt;code&gt;torch&lt;/code&gt; provides.&lt;/p&gt;
&lt;p&gt;But we haven’t really had our “hello world” moment yet, at least not if by “hello world” you mean the inevitable &lt;em&gt;deep learning experience of classifying pets&lt;/em&gt;. Cat or dog? Beagle or boxer? Chinook or Chihuahua? We’ll distinguish ourselves by asking a (slightly) different question: What kind of bird?&lt;/p&gt;
&lt;p&gt;Topics we’ll address on our way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The core roles of &lt;code&gt;torch&lt;/code&gt; &lt;em&gt;datasets&lt;/em&gt; and &lt;em&gt;data loaders&lt;/em&gt;, respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to apply &lt;code&gt;transform&lt;/code&gt;s, both for image preprocessing and data augmentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to use Resnet &lt;span class="citation"&gt;(He et al. 2015)&lt;/span&gt;, a pre-trained model that comes with &lt;code&gt;torchvision&lt;/code&gt;, for transfer learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to use learning rate schedulers, and in particular, the one-cycle learning rate algorithm [@abs-1708-07120].&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to find a good initial learning rate.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For convenience, the code is available on &lt;a href="https://colab.research.google.com/drive/1OJzzqiQVbh3ZdLB2L2t_DhBGInlh9o-k?usp=sharing"&gt;Google Colaboratory&lt;/a&gt; – no copy-pasting required.&lt;/p&gt;
&lt;h2 id="data-loading-and-preprocessing"&gt;Data loading and preprocessing&lt;/h2&gt;
&lt;p&gt;The example dataset used here is available on &lt;a href="https://www.kaggle.com/gpiosenka/100-bird-species/data" class="uri"&gt;Kaggle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Conveniently, it may be obtained using &lt;a href="https://github.com/mlverse/torchdatasets"&gt;&lt;code&gt;torchdatasets&lt;/code&gt;&lt;/a&gt;, which uses &lt;a href="https://github.com/rstudio/pins"&gt;&lt;code&gt;pins&lt;/code&gt;&lt;/a&gt; for authentication, retrieval and storage. To enable &lt;code&gt;pins&lt;/code&gt; to manage your Kaggle downloads, please follow the instructions &lt;a href="https://pins.rstudio.com/articles/boards-kaggle.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This dataset is very “clean,” unlike the images we may be used to from, e.g., &lt;a href="http://image-net.org/"&gt;ImageNet&lt;/a&gt;. To help with generalization, we introduce noise during training – in other words, we perform &lt;em&gt;data augmentation&lt;/em&gt;. In &lt;code&gt;torchvision&lt;/code&gt;, data augmentation is part of an &lt;em&gt;image processing pipeline&lt;/em&gt; that first converts an image to a tensor, and then applies any transformations such as resizing, cropping, normalization, or various forms of distorsion.&lt;/p&gt;
&lt;p&gt;Below are the transformations performed on the training set. Note how most of them are for data augmentation, while normalization is done to comply with what’s expected by ResNet.&lt;/p&gt;
&lt;h4 id="image-preprocessing-pipeline"&gt;Image preprocessing pipeline&lt;/h4&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(torch)
library(torchvision)
library(torchdatasets)

library(dplyr)
library(pins)
library(ggplot2)

device &amp;lt;- if (cuda_is_available()) torch_device(&amp;quot;cuda:0&amp;quot;) else &amp;quot;cpu&amp;quot;

train_transforms &amp;lt;- function(img) {
  img %&amp;gt;%
    # first convert image to tensor
    transform_to_tensor() %&amp;gt;%
    # then move to the GPU (if available)
    (function(x) x$to(device = device)) %&amp;gt;%
    # data augmentation
    transform_random_resized_crop(size = c(224, 224)) %&amp;gt;%
    # data augmentation
    transform_color_jitter() %&amp;gt;%
    # data augmentation
    transform_random_horizontal_flip() %&amp;gt;%
    # normalize according to what is expected by resnet
    transform_normalize(mean = c(0.485, 0.456, 0.406), std = c(0.229, 0.224, 0.225))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the validation set, we don’t want to introduce noise, but still need to resize, crop, and normalize the images. The test set should be treated identically.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;valid_transforms &amp;lt;- function(img) {
  img %&amp;gt;%
    transform_to_tensor() %&amp;gt;%
    (function(x) x$to(device = device)) %&amp;gt;%
    transform_resize(256) %&amp;gt;%
    transform_center_crop(224) %&amp;gt;%
    transform_normalize(mean = c(0.485, 0.456, 0.406), std = c(0.229, 0.224, 0.225))
}

test_transforms &amp;lt;- valid_transforms&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now, let’s get the data, nicely divided into training, validation and test sets. Additionally, we tell the corresponding R objects what transformations they’re expected to apply:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;train_ds &amp;lt;- bird_species_dataset(&amp;quot;data&amp;quot;, download = TRUE, transform = train_transforms)

valid_ds &amp;lt;- bird_species_dataset(&amp;quot;data&amp;quot;, split = &amp;quot;valid&amp;quot;, transform = valid_transforms)

test_ds &amp;lt;- bird_species_dataset(&amp;quot;data&amp;quot;, split = &amp;quot;test&amp;quot;, transform = test_transforms)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two things to note. First, transformations are part of the &lt;em&gt;dataset&lt;/em&gt; concept, as opposed to the &lt;em&gt;data loader&lt;/em&gt; we’ll encounter shortly. Second, let’s take a look at how the images have been stored on disk. The overall directory structure (starting from &lt;code&gt;data&lt;/code&gt;, which we specified as the root directory to be used) is this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data/bird_species/train
data/bird_species/valid
data/bird_species/test&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;train&lt;/code&gt;, &lt;code&gt;valid&lt;/code&gt;, and &lt;code&gt;test&lt;/code&gt; directories, different classes of images reside in their own folders. For example, here is the directory layout for the first three classes in the test set:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data/bird_species/test/ALBATROSS/
 - data/bird_species/test/ALBATROSS/1.jpg
 - data/bird_species/test/ALBATROSS/2.jpg
 - data/bird_species/test/ALBATROSS/3.jpg
 - data/bird_species/test/ALBATROSS/4.jpg
 - data/bird_species/test/ALBATROSS/5.jpg
 
data/test/&amp;#39;ALEXANDRINE PARAKEET&amp;#39;/
 - data/bird_species/test/&amp;#39;ALEXANDRINE PARAKEET&amp;#39;/1.jpg
 - data/bird_species/test/&amp;#39;ALEXANDRINE PARAKEET&amp;#39;/2.jpg
 - data/bird_species/test/&amp;#39;ALEXANDRINE PARAKEET&amp;#39;/3.jpg
 - data/bird_species/test/&amp;#39;ALEXANDRINE PARAKEET&amp;#39;/4.jpg
 - data/bird_species/test/&amp;#39;ALEXANDRINE PARAKEET&amp;#39;/5.jpg
 
 data/test/&amp;#39;AMERICAN BITTERN&amp;#39;/
 - data/bird_species/test/&amp;#39;AMERICAN BITTERN&amp;#39;/1.jpg
 - data/bird_species/test/&amp;#39;AMERICAN BITTERN&amp;#39;/2.jpg
 - data/bird_species/test/&amp;#39;AMERICAN BITTERN&amp;#39;/3.jpg
 - data/bird_species/test/&amp;#39;AMERICAN BITTERN&amp;#39;/4.jpg
 - data/bird_species/test/&amp;#39;AMERICAN BITTERN&amp;#39;/5.jpg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is exactly the kind of layout expected by &lt;code&gt;torch&lt;/code&gt;s &lt;code&gt;image_folder_dataset()&lt;/code&gt; – and really &lt;code&gt;bird_species_dataset()&lt;/code&gt; instantiates a subtype of this class. Had we downloaded the data manually, respecting the required directory structure, we could have created the datasets like so:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# e.g.
train_ds &amp;lt;- image_folder_dataset(
  file.path(data_dir, &amp;quot;train&amp;quot;),
  transform = train_transforms)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we got the data, let’s see how many items there are in each set.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;train_ds$.length()
valid_ds$.length()
test_ds$.length()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;31316
1125
1125&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That training set is really big! It’s thus recommended to run this on GPU, or just play around with the provided Colab notebook.&lt;/p&gt;
&lt;p&gt;With so many samples, we’re curious how many classes there are.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;class_names &amp;lt;- test_ds$classes
length(class_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;225&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we &lt;em&gt;do&lt;/em&gt; have a substantial training set, but the task is formidable as well: We’re going to tell apart no less than 225 different bird species.&lt;/p&gt;
&lt;h4 id="data-loaders"&gt;Data loaders&lt;/h4&gt;
&lt;p&gt;While &lt;em&gt;datasets&lt;/em&gt; know what to do with each single item, &lt;em&gt;data loaders&lt;/em&gt; know how to treat them collectively. How many samples make up a batch? Do we want to feed them in the same order always, or instead, have a different order chosen for every epoch?&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;batch_size &amp;lt;- 64

train_dl &amp;lt;- dataloader(train_ds, batch_size = batch_size, shuffle = TRUE)
valid_dl &amp;lt;- dataloader(valid_ds, batch_size = batch_size)
test_dl &amp;lt;- dataloader(test_ds, batch_size = batch_size)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data loaders, too, may be queried for their length. Now length means: How many batches?&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;train_dl$.length() 
valid_dl$.length() 
test_dl$.length()  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;490
18
18&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="some-birds"&gt;Some birds&lt;/h4&gt;
&lt;p&gt;Next, let’s view a few images from the test set. We can retrieve the first batch – images and corresponding classes – by creating an iterator from the &lt;code&gt;dataloader&lt;/code&gt; and calling &lt;code&gt;next()&lt;/code&gt; on it:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# for display purposes, here we are actually using a batch_size of 24
batch &amp;lt;- train_dl$.iter()$.next()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;batch&lt;/code&gt; is a list, the first item being the image tensors:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;batch[[1]]$size()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1]  24   3 224 224&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the second, the classes:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;batch[[2]]$size()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 24&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Classes are coded as integers, to be used as indices in a vector of class names. We’ll use those for labeling the images.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;classes &amp;lt;- batch[[2]]
classes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
 1
 1
 1
 1
 1
 2
 2
 2
 2
 2
 3
 3
 3
 3
 3
 4
 4
 4
 4
 4
 5
 5
 5
 5
[ GPULongType{24} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The image tensors have shape &lt;code&gt;batch_size x num_channels x height x width&lt;/code&gt;. For plotting using &lt;code&gt;as.raster()&lt;/code&gt;, we need to reshape the images such that channels come last. We also undo the normalization applied by the &lt;code&gt;dataloader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are the first twenty-four images:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(dplyr)

images &amp;lt;- as_array(batch[[1]]) %&amp;gt;% aperm(perm = c(1, 3, 4, 2))
mean &amp;lt;- c(0.485, 0.456, 0.406)
std &amp;lt;- c(0.229, 0.224, 0.225)
images &amp;lt;- std * images + mean
images &amp;lt;- images * 255
images[images &amp;gt; 255] &amp;lt;- 255
images[images &amp;lt; 0] &amp;lt;- 0

par(mfcol = c(4,6), mar = rep(1, 4))

images %&amp;gt;%
  purrr::array_tree(1) %&amp;gt;%
  purrr::set_names(class_names[as_array(classes)]) %&amp;gt;%
  purrr::map(as.raster, max = 255) %&amp;gt;%
  purrr::iwalk(~{plot(.x); title(.y)})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://blogs.rstudio.com/tensorflow//posts/2020-10-19-torch-image-classification/images/image_classif_birds.png" width="250" /&gt;&lt;/p&gt;
&lt;h2 id="model"&gt;Model&lt;/h2&gt;
&lt;p&gt;The backbone of our model is a pre-trained instance of ResNet.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model &amp;lt;- model_resnet18(pretrained = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we want to distinguish among our 225 bird species, while ResNet was trained on 1000 different classes. What can we do? We simply replace the output layer.&lt;/p&gt;
&lt;p&gt;The new output layer is also the only one whose weights we are going to train – leaving all other ResNet parameters the way they are. Technically, we &lt;em&gt;could&lt;/em&gt; perform backpropagation through the complete model, striving to fine-tune ResNet’s weights as well. However, this would slow down training significantly. In fact, the choice is not all-or-none: It is up to us how many of the original parameters to keep fixed, and how many to “set free” for fine tuning. For the task at hand, we’ll be content to just train the newly added output layer: With the abundance of animals, including birds, in ImageNet, we expect the trained ResNet to know a lot about them!&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model$parameters %&amp;gt;% purrr::walk(function(param) param$requires_grad_(FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To replace the output layer, the model is modified in-place:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;num_features &amp;lt;- model$fc$in_features

model$fc &amp;lt;- nn_linear(in_features = num_features, out_features = length(class_names))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now put the modified model on the GPU (if available):&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model &amp;lt;- model$to(device = device)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="training"&gt;Training&lt;/h2&gt;
&lt;p&gt;For optimization, we use cross entropy loss and stochastic gradient descent.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;criterion &amp;lt;- nn_cross_entropy_loss()

optimizer &amp;lt;- optim_sgd(model$parameters, lr = 0.1, momentum = 0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="finding-an-optimally-efficient-learning-rate"&gt;Finding an optimally efficient learning rate&lt;/h4&gt;
&lt;p&gt;We set the learning rate to &lt;code&gt;0.1&lt;/code&gt;, but that is just a formality. As has become widely known due to the excellent lectures by &lt;a href="http://fast.ai"&gt;fast.ai&lt;/a&gt;, it makes sense to spend some time upfront to determine an efficient learning rate. While out-of-the-box, &lt;code&gt;torch&lt;/code&gt; does not provide a tool like fast.ai’s learning rate finder, the logic is straightforward to implement. Here’s how to find a good learning rate, as translated to R from &lt;a href="https://sgugger.github.io/how-do-you-find-a-good-learning-rate.html"&gt;Sylvain Gugger’s post&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# ported from: https://sgugger.github.io/how-do-you-find-a-good-learning-rate.html

losses &amp;lt;- c()
log_lrs &amp;lt;- c()

find_lr &amp;lt;- function(init_value = 1e-8, final_value = 10, beta = 0.98) {

  num &amp;lt;- train_dl$.length()
  mult = (final_value/init_value)^(1/num)
  lr &amp;lt;- init_value
  optimizer$param_groups[[1]]$lr &amp;lt;- lr
  avg_loss &amp;lt;- 0
  best_loss &amp;lt;- 0
  batch_num &amp;lt;- 0

  for (b in enumerate(train_dl)) {

    batch_num &amp;lt;- batch_num + 1
    optimizer$zero_grad()
    output &amp;lt;- model(b[[1]]$to(device = device))
    loss &amp;lt;- criterion(output, b[[2]]$to(device = device))

    #Compute the smoothed loss
    avg_loss &amp;lt;- beta * avg_loss + (1-beta) * loss$item()
    smoothed_loss &amp;lt;- avg_loss / (1 - beta^batch_num)
    #Stop if the loss is exploding
    if (batch_num &amp;gt; 1 &amp;amp;&amp;amp; smoothed_loss &amp;gt; 4 * best_loss) break
    #Record the best loss
    if (smoothed_loss &amp;lt; best_loss || batch_num == 1) best_loss &amp;lt;- smoothed_loss

    #Store the values
    losses &amp;lt;&amp;lt;- c(losses, smoothed_loss)
    log_lrs &amp;lt;&amp;lt;- c(log_lrs, (log(lr, 10)))

    loss$backward()
    optimizer$step()

    #Update the lr for the next step
    lr &amp;lt;- lr * mult
    optimizer$param_groups[[1]]$lr &amp;lt;- lr
  }
}

find_lr()

df &amp;lt;- data.frame(log_lrs = log_lrs, losses = losses)
ggplot(df, aes(log_lrs, losses)) + geom_point(size = 1) + theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://blogs.rstudio.com/tensorflow//posts/2020-10-19-torch-image-classification/images/lr_finder.png" width="372" /&gt;&lt;/p&gt;
&lt;p&gt;The best learning rate is not the exact one where loss is at a minimum. Instead, it should be picked somewhat earlier on the curve, while loss is still decreasing. &lt;code&gt;0.05&lt;/code&gt; looks like a sensible choice.&lt;/p&gt;
&lt;p&gt;This value is nothing but an anchor, however. &lt;em&gt;Learning rate schedulers&lt;/em&gt; allow learning rates to evolve according to some proven algorithm. Among others, &lt;code&gt;torch&lt;/code&gt; implements one-cycle learning [@abs-1708-07120], cyclical learning rates &lt;span class="citation"&gt;(Smith 2015)&lt;/span&gt;, and cosine annealing with warm restarts &lt;span class="citation"&gt;(Loshchilov and Hutter 2016)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here, we use &lt;code&gt;lr_one_cycle()&lt;/code&gt;, passing in our newly found, optimally efficient, hopefully, value &lt;code&gt;0.05&lt;/code&gt; as a maximum learning rate. &lt;code&gt;lr_one_cycle()&lt;/code&gt; will start with a low rate, then gradually ramp up until it reaches the allowed maximum. After that, the learning rate will slowly, continuously decrease, until it falls slightly below its initial value.&lt;/p&gt;
&lt;p&gt;All this happens not per epoch, but exactly once, which is why the name has &lt;code&gt;one_cycle&lt;/code&gt; in it. Here’s how the evolution of learning rates looks in our example:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blogs.rstudio.com/tensorflow//posts/2020-10-19-torch-image-classification/images/one_cycle_lr.png" width="315" /&gt;&lt;/p&gt;
&lt;p&gt;Before we start training, let’s quickly re-initialize the model, so as to start from a clean slate:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model &amp;lt;- model_resnet18(pretrained = TRUE)
model$parameters %&amp;gt;% purrr::walk(function(param) param$requires_grad_(FALSE))

num_features &amp;lt;- model$fc$in_features

model$fc &amp;lt;- nn_linear(in_features = num_features, out_features = length(class_names))

model &amp;lt;- model$to(device = device)

criterion &amp;lt;- nn_cross_entropy_loss()

optimizer &amp;lt;- optim_sgd(model$parameters, lr = 0.05, momentum = 0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And instantiate the scheduler:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;num_epochs = 10

scheduler &amp;lt;- optimizer %&amp;gt;% 
  lr_one_cycle(max_lr = 0.05, epochs = num_epochs, steps_per_epoch = train_dl$.length())&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="training-loop"&gt;Training loop&lt;/h4&gt;
&lt;p&gt;Now we train for ten epochs. For every training batch, we call &lt;code&gt;scheduler$step()&lt;/code&gt; to adjust the learning rate. Notably, this has to be done &lt;em&gt;after&lt;/em&gt; &lt;code&gt;optimizer$step()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;train_batch &amp;lt;- function(b) {

  optimizer$zero_grad()
  output &amp;lt;- model(b[[1]])
  loss &amp;lt;- criterion(output, b[[2]]$to(device = device))
  loss$backward()
  optimizer$step()
  scheduler$step()
  loss$item()

}

valid_batch &amp;lt;- function(b) {

  output &amp;lt;- model(b[[1]])
  loss &amp;lt;- criterion(output, b[[2]]$to(device = device))
  loss$item()
}

for (epoch in 1:num_epochs) {

  model$train()
  train_losses &amp;lt;- c()

  for (b in enumerate(train_dl)) {
    loss &amp;lt;- train_batch(b)
    train_losses &amp;lt;- c(train_losses, loss)
  }

  model$eval()
  valid_losses &amp;lt;- c()

  for (b in enumerate(valid_dl)) {
    loss &amp;lt;- valid_batch(b)
    valid_losses &amp;lt;- c(valid_losses, loss)
  }

  cat(sprintf(&amp;quot;\nLoss at epoch %d: training: %3f, validation: %3f\n&amp;quot;, epoch, mean(train_losses), mean(valid_losses)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Loss at epoch 1: training: 2.662901, validation: 0.790769

Loss at epoch 2: training: 1.543315, validation: 1.014409

Loss at epoch 3: training: 1.376392, validation: 0.565186

Loss at epoch 4: training: 1.127091, validation: 0.575583

Loss at epoch 5: training: 0.916446, validation: 0.281600

Loss at epoch 6: training: 0.775241, validation: 0.215212

Loss at epoch 7: training: 0.639521, validation: 0.151283

Loss at epoch 8: training: 0.538825, validation: 0.106301

Loss at epoch 9: training: 0.407440, validation: 0.083270

Loss at epoch 10: training: 0.354659, validation: 0.080389&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like the model made good progress, but we don’t yet know anything about classification accuracy in absolute terms. We’ll check that out on the test set.&lt;/p&gt;
&lt;h2 id="test-set-accuracy"&gt;Test set accuracy&lt;/h2&gt;
&lt;p&gt;Finally, we calculate accuracy on the test set:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model$eval()

test_batch &amp;lt;- function(b) {

  output &amp;lt;- model(b[[1]])
  labels &amp;lt;- b[[2]]$to(device = device)
  loss &amp;lt;- criterion(output, labels)
  
  test_losses &amp;lt;&amp;lt;- c(test_losses, loss$item())
  # torch_max returns a list, with position 1 containing the values
  # and position 2 containing the respective indices
  predicted &amp;lt;- torch_max(output$data(), dim = 2)[[2]]
  total &amp;lt;&amp;lt;- total + labels$size(1)
  # add number of correct classifications in this batch to the aggregate
  correct &amp;lt;&amp;lt;- correct + (predicted == labels)$sum()$item()

}

test_losses &amp;lt;- c()
total &amp;lt;- 0
correct &amp;lt;- 0

for (b in enumerate(test_dl)) {
  test_batch(b)
}

mean(test_losses)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 0.03719&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;test_accuracy &amp;lt;-  correct/total
test_accuracy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 0.98756&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An impressive result, given how many different species there are!&lt;/p&gt;
&lt;h2 id="wrapup"&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;Hopefully, this has been a useful introduction to classifying images with &lt;code&gt;torch&lt;/code&gt;, as well as to its non-domain-specific architectural elements, like datasets, data loaders, and learning-rate schedulers. Future posts will explore other domains, as well as move on beyond “hello world” in image recognition. Thanks for reading!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id="refs" class="references csl-bib-body hanging-indent"&gt;
&lt;div id="ref-HeZRS15" class="csl-entry"&gt;
He, Kaiming, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2015. &lt;span&gt;“Deep Residual Learning for Image Recognition.”&lt;/span&gt; &lt;em&gt;CoRR&lt;/em&gt; abs/1512.03385. &lt;a href="http://arxiv.org/abs/1512.03385"&gt;http://arxiv.org/abs/1512.03385&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-LoshchilovH16a" class="csl-entry"&gt;
Loshchilov, Ilya, and Frank Hutter. 2016. &lt;span&gt;“&lt;span&gt;SGDR:&lt;/span&gt; Stochastic Gradient Descent with Restarts.”&lt;/span&gt; &lt;em&gt;CoRR&lt;/em&gt; abs/1608.03983. &lt;a href="http://arxiv.org/abs/1608.03983"&gt;http://arxiv.org/abs/1608.03983&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-Smith15a" class="csl-entry"&gt;
Smith, Leslie N. 2015. &lt;span&gt;“No More Pesky Learning Rate Guessing Games.”&lt;/span&gt; &lt;em&gt;CoRR&lt;/em&gt; abs/1506.01186. &lt;a href="http://arxiv.org/abs/1506.01186"&gt;http://arxiv.org/abs/1506.01186&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Physically, the dataset consists of a single &lt;code&gt;zip&lt;/code&gt; file; so it is really the first instruction that downloads all the data. The remaining two function calls perform semantic mappings only.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">99e215574cdffd1c16282428321ce8e7</distill:md5>
      <category>Torch</category>
      <category>R</category>
      <category>Image Recognition &amp; Image Processing</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-10-19-torch-image-classification</guid>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-10-19-torch-image-classification/images/image_classif_birds.png" medium="image" type="image/png" width="500" height="333"/>
    </item>
    <item>
      <title>sparklyr.flint 0.2: ASOF Joins, OLS Regression, and additional summarizers</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yitao Li</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-10-12-sparklyr-flint-0.2.0-released</link>
      <description>


&lt;p&gt;Since &lt;a href="https://cran.r-project.org/web/packages/sparklyr.flint/index.html"&gt;&lt;code&gt;sparklyr.flint&lt;/code&gt;&lt;/a&gt;, a &lt;a href="https://sparklyr.ai"&gt;&lt;code&gt;sparklyr&lt;/code&gt;&lt;/a&gt; extension for leveraging &lt;a href="https://github.com/twosigma/flint"&gt;Flint&lt;/a&gt; time series functionalities through &lt;code&gt;sparklyr&lt;/code&gt;, was &lt;a href="https://blogs.rstudio.com/ai/posts/2020-09-07-sparklyr-flint"&gt;introduced&lt;/a&gt; in September, we have made a number of enhancements to it, and have successfully submitted &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.2 to CRAN.&lt;/p&gt;
&lt;p&gt;In this blog post, we highlight the following new features and improvements from &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#asof-joins"&gt;ASOF Joins&lt;/a&gt; of Timeseries RDDs&lt;/li&gt;
&lt;li&gt;&lt;a href="#ols-regression"&gt;OLS Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#additional-summarizers"&gt;Additional Summarizers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-integration-with-sparklyr"&gt;Better Integration With &lt;code&gt;sparklyr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="asof-joins"&gt;ASOF Joins&lt;/h2&gt;
&lt;p&gt;For those unfamiliar with the term, ASOF joins are temporal join operations based on inexact matching of timestamps. Within the context of &lt;a href="https://spark.apache.org"&gt;Apache Spark&lt;/a&gt;, a join operation, loosely speaking, matches records from two data frames (let’s call them &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;) based on some criteria. A temporal join implies matching records in &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; based on timestamps, and with inexact matching of timestamps permitted, it is typically useful to join &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; along one of the following temporal directions:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Looking behind: if a record from &lt;code&gt;left&lt;/code&gt; has timestamp &lt;code&gt;t&lt;/code&gt;, then it gets matched with ones from &lt;code&gt;right&lt;/code&gt; having the most recent timestamp less than or equal to &lt;code&gt;t&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Looking ahead: if a record from &lt;code&gt;left&lt;/code&gt; has timestamp &lt;code&gt;t,&lt;/code&gt; then it gets matched with ones from &lt;code&gt;right&lt;/code&gt; having the smallest timestamp greater than or equal to (or alternatively, strictly greater than) &lt;code&gt;t&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, oftentimes it is not useful to consider two timestamps as “matching” if they are too far apart. Therefore, an additional constraint on the maximum amount of time to look behind or look ahead is usually also part of an ASOF join operation.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.2, all ASOF join functionalities of Flint are accessible via the &lt;code&gt;asof_join()&lt;/code&gt; method. For example, given 2 timeseries RDDs &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(sparklyr)
library(sparklyr.flint)

sc &amp;lt;- spark_connect(master = &amp;quot;local&amp;quot;)
left &amp;lt;- copy_to(sc, tibble::tibble(t = seq(10), u = seq(10))) %&amp;gt;%
  from_sdf(is_sorted = TRUE, time_unit = &amp;quot;SECONDS&amp;quot;, time_column = &amp;quot;t&amp;quot;)
right &amp;lt;- copy_to(sc, tibble::tibble(t = seq(10) + 1, v = seq(10) + 1L)) %&amp;gt;%
  from_sdf(is_sorted = TRUE, time_unit = &amp;quot;SECONDS&amp;quot;, time_column = &amp;quot;t&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following prints the result of matching each record from &lt;code&gt;left&lt;/code&gt; with the most recent record(s) from &lt;code&gt;right&lt;/code&gt; that are at most 1 second behind.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(asof_join(left, right, tol = &amp;quot;1s&amp;quot;, direction = &amp;quot;&amp;gt;=&amp;quot;) %&amp;gt;% to_sdf())

## # Source: spark&amp;lt;?&amp;gt; [?? x 3]
##    time                    u     v
##    &amp;lt;dttm&amp;gt;              &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1 1970-01-01 00:00:01     1    NA
##  2 1970-01-01 00:00:02     2     2
##  3 1970-01-01 00:00:03     3     3
##  4 1970-01-01 00:00:04     4     4
##  5 1970-01-01 00:00:05     5     5
##  6 1970-01-01 00:00:06     6     6
##  7 1970-01-01 00:00:07     7     7
##  8 1970-01-01 00:00:08     8     8
##  9 1970-01-01 00:00:09     9     9
## 10 1970-01-01 00:00:10    10    10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whereas if we change the temporal direction to “&amp;lt;”, then each record from &lt;code&gt;left&lt;/code&gt; will be matched with any record(s) from &lt;code&gt;right&lt;/code&gt; that is strictly in the future and is at most 1 second ahead of the current record from &lt;code&gt;left&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(asof_join(left, right, tol = &amp;quot;1s&amp;quot;, direction = &amp;quot;&amp;lt;&amp;quot;) %&amp;gt;% to_sdf())

## # Source: spark&amp;lt;?&amp;gt; [?? x 3]
##    time                    u     v
##    &amp;lt;dttm&amp;gt;              &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1 1970-01-01 00:00:01     1     2
##  2 1970-01-01 00:00:02     2     3
##  3 1970-01-01 00:00:03     3     4
##  4 1970-01-01 00:00:04     4     5
##  5 1970-01-01 00:00:05     5     6
##  6 1970-01-01 00:00:06     6     7
##  7 1970-01-01 00:00:07     7     8
##  8 1970-01-01 00:00:08     8     9
##  9 1970-01-01 00:00:09     9    10
## 10 1970-01-01 00:00:10    10    11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice regardless of which temporal direction is selected, an outer-left join is always performed (i.e., all timestamp values and &lt;code&gt;u&lt;/code&gt; values of &lt;code&gt;left&lt;/code&gt; from above will always be present in the output, and the &lt;code&gt;v&lt;/code&gt; column in the output will contain &lt;code&gt;NA&lt;/code&gt; whenever there is no record from &lt;code&gt;right&lt;/code&gt; that meets the matching criteria).&lt;/p&gt;
&lt;h2 id="ols-regression"&gt;OLS Regression&lt;/h2&gt;
&lt;p&gt;You might be wondering whether the version of this functionality in Flint is more or less identical to &lt;code&gt;lm()&lt;/code&gt; in R. Turns out it has much more to offer than &lt;code&gt;lm()&lt;/code&gt; does. An OLS regression in Flint will compute useful metrics such as &lt;a href="https://en.wikipedia.org/wiki/Akaike_information_criterion"&gt;Akaike information criterion&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Bayesian_information_criterion"&gt;Bayesian information criterion&lt;/a&gt;, both of which are useful for model selection purposes, and the calculations of both are parallelized by Flint to fully utilize computational power available in a Spark cluster. In addition, Flint supports ignoring regressors that are constant or nearly constant, which becomes useful when an intercept term is included. To see why this is the case, we need to briefly examine the goal of the OLS regression, which is to find some column vector of coefficients &lt;span class="math inline"&gt;\(\mathbf{\beta}\)&lt;/span&gt; that minimizes &lt;span class="math inline"&gt;\(\|\mathbf{y} - \mathbf{X} \mathbf{\beta}\|^2\)&lt;/span&gt;, where &lt;span class="math inline"&gt;\(\mathbf{y}\)&lt;/span&gt; is the column vector of response variables, and &lt;span class="math inline"&gt;\(\mathbf{X}\)&lt;/span&gt; is a matrix consisting of columns of regressors plus an entire column of &lt;span class="math inline"&gt;\(1\)&lt;/span&gt;s representing the intercept terms. The solution to this problem is &lt;span class="math inline"&gt;\(\mathbf{\beta} = (\mathbf{X}^\intercal\mathbf{X})^{-1}\mathbf{X}^\intercal\mathbf{y}\)&lt;/span&gt;, assuming the Gram matrix &lt;span class="math inline"&gt;\(\mathbf{X}^\intercal\mathbf{X}\)&lt;/span&gt; is non-singular. However, if &lt;span class="math inline"&gt;\(\mathbf{X}\)&lt;/span&gt; contains a column of all &lt;span class="math inline"&gt;\(1\)&lt;/span&gt;s of intercept terms, and another column formed by a regressor that is constant (or nearly so), then columns of &lt;span class="math inline"&gt;\(\mathbf{X}\)&lt;/span&gt; will be linearly dependent (or nearly so) and &lt;span class="math inline"&gt;\(\mathbf{X}^\intercal\mathbf{X}\)&lt;/span&gt; will be singular (or nearly so), which presents an issue computation-wise. However, if a regressor is constant, then it essentially plays the same role as the intercept terms do. So simply excluding such a constant regressor in &lt;span class="math inline"&gt;\(\mathbf{X}\)&lt;/span&gt; solves the problem. Also, speaking of inverting the Gram matrix, readers remembering the concept of “condition number” from numerical analysis must be thinking to themselves how computing &lt;span class="math inline"&gt;\(\mathbf{\beta} = (\mathbf{X}^\intercal\mathbf{X})^{-1}\mathbf{X}^\intercal\mathbf{y}\)&lt;/span&gt; could be numerically unstable if &lt;span class="math inline"&gt;\(\mathbf{X}^\intercal\mathbf{X}\)&lt;/span&gt; has a large condition number. This is why Flint also outputs the condition number of the Gram matrix in the OLS regression result, so that one can sanity-check the underlying quadratic minimization problem being solved is well-conditioned.&lt;/p&gt;
&lt;p&gt;So, to summarize, the OLS regression functionality implemented in Flint not only outputs the solution to the problem, but also calculates useful metrics that help data scientists assess the sanity and predictive quality of the resulting model.&lt;/p&gt;
&lt;p&gt;To see OLS regression in action with &lt;code&gt;sparklyr.flint&lt;/code&gt;, one can run the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mtcars_sdf &amp;lt;- copy_to(sc, mtcars, overwrite = TRUE) %&amp;gt;%
  dplyr::mutate(time = 0L)
mtcars_ts &amp;lt;- from_sdf(mtcars_sdf, is_sorted = TRUE, time_unit = &amp;quot;SECONDS&amp;quot;)
model &amp;lt;- ols_regression(mtcars_ts, mpg ~ hp + wt) %&amp;gt;% to_sdf()

print(model %&amp;gt;% dplyr::select(akaikeIC, bayesIC, cond))

## # Source: spark&amp;lt;?&amp;gt; [?? x 3]
##   akaikeIC bayesIC    cond
##      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1     155.    159. 345403.

# ^ output says condition number of the Gram matrix was within reason&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and obtain &lt;span class="math inline"&gt;\(\mathbf{\beta}\)&lt;/span&gt;, the vector of optimal coefficients, with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(model %&amp;gt;% dplyr::pull(beta))

## [[1]]
## [1] -0.03177295 -3.87783074&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="additional-summarizers"&gt;Additional Summarizers&lt;/h2&gt;
&lt;p&gt;The EWMA (Exponential Weighted Moving Average), EMA half-life, and the standardized moment summarizers (namely, skewness and kurtosis) along with a few others which were missing in &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.1 are now fully supported in &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.2.&lt;/p&gt;
&lt;h2 id="better-integration-with-sparklyr"&gt;Better Integration With &lt;code&gt;sparklyr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;While &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.1 included a &lt;code&gt;collect()&lt;/code&gt; method for exporting data from a Flint time-series RDD to an R data frame, it did not have a similar method for extracting the underlying Spark data frame from a Flint time-series RDD. This was clearly an oversight. In &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.2, one can call &lt;code&gt;to_sdf()&lt;/code&gt; on a timeseries RDD to get back a Spark data frame that is usable in &lt;code&gt;sparklyr&lt;/code&gt; (e.g., as shown by &lt;code&gt;model %&amp;gt;% to_sdf() %&amp;gt;% dplyr::select(...)&lt;/code&gt; examples from above). One can also get to the underlying Spark data frame JVM object reference by calling &lt;code&gt;spark_dataframe()&lt;/code&gt; on a Flint time-series RDD (this is usually unnecessary in vast majority of &lt;code&gt;sparklyr&lt;/code&gt; use cases though).&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have presented a number of new features and improvements introduced in &lt;code&gt;sparklyr.flint&lt;/code&gt; 0.2 and deep-dived into some of them in this blog post. We hope you are as excited about them as we are.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;h2 id="acknowledgement"&gt;Acknowledgement&lt;/h2&gt;
&lt;p&gt;The author would like to thank Mara (&lt;a href="https://github.com/batpigandme"&gt;@batpigandme&lt;/a&gt;), Sigrid (&lt;a href="https://github.com/skeydan"&gt;@skeydan&lt;/a&gt;), and Javier (&lt;a href="https://github.com/javierluraschi"&gt;@javierluraschi&lt;/a&gt;) for their fantastic editorial inputs on this blog post!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">21fc4b2e51e9d4a153f2dae536e7279b</distill:md5>
      <category>R</category>
      <category>Packages/Releases</category>
      <category>Time Series</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-10-12-sparklyr-flint-0.2.0-released</guid>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-10-12-sparklyr-flint-0.2.0-released/images/sparklyr-flint-0.2.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Optimizers in torch</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-10-09-torch-optim</link>
      <description>


&lt;p&gt;This is the fourth and last installment in a series introducing &lt;code&gt;torch&lt;/code&gt; basics. Initially, we &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-01-torch-network-from-scratch/"&gt;focused on &lt;em&gt;tensors&lt;/em&gt;&lt;/a&gt;. To illustrate their power, we coded a complete (if toy-size) neural network from scratch. We didn’t make use of any of &lt;code&gt;torch&lt;/code&gt;’s higher-level capabilities – not even &lt;em&gt;autograd&lt;/em&gt;, its automatic-differentiation feature.&lt;/p&gt;
&lt;p&gt;This changed in the &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-05-torch-network-with-autograd"&gt;follow-up post&lt;/a&gt;. No more thinking about derivatives and the chain rule; a single call to &lt;code&gt;backward()&lt;/code&gt; did it all.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-07-torch-modules"&gt;In the third post&lt;/a&gt;, the code again saw a major simplification. Instead of tediously assembling a DAG&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; by hand, we let &lt;em&gt;modules&lt;/em&gt; take care of the logic.&lt;/p&gt;
&lt;p&gt;Based on that last state, there are just two more things to do. For one, we still compute the loss by hand. And secondly, even though we get the gradients all nicely computed from &lt;em&gt;autograd&lt;/em&gt;, we still loop over the model’s parameters, updating them all ourselves. You won’t be surprised to hear that none of this is necessary.&lt;/p&gt;
&lt;h2 id="losses-and-loss-functions"&gt;Losses and loss functions&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;torch&lt;/code&gt; comes with all the usual loss functions, such as mean squared error, cross entropy, Kullback-Leibler divergence, and the like. In general, there are two usage modes.&lt;/p&gt;
&lt;p&gt;Take the example of calculating mean squared error. One way is to call &lt;code&gt;nnf_mse_loss()&lt;/code&gt; directly on the prediction and ground truth tensors. For example:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- torch_randn(c(3, 2, 3))
y &amp;lt;- torch_zeros(c(3, 2, 3))

nnf_mse_loss(x, y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
0.682362
[ CPUFloatType{} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other loss functions designed to be called directly start with &lt;code&gt;nnf_&lt;/code&gt; as well: &lt;code&gt;nnf_binary_cross_entropy()&lt;/code&gt;, &lt;code&gt;nnf_nll_loss()&lt;/code&gt;, &lt;code&gt;nnf_kl_div()&lt;/code&gt; … and so on.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second way is to define the algorithm in advance and call it at some later time. Here, respective constructors all start with &lt;code&gt;nn_&lt;/code&gt; and end in &lt;code&gt;_loss&lt;/code&gt;. For example: &lt;code&gt;nn_bce_loss()&lt;/code&gt;, &lt;code&gt;nn_nll_loss(),&lt;/code&gt; &lt;code&gt;nn_kl_div_loss()&lt;/code&gt; …&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;loss &amp;lt;- nn_mse_loss()

loss(x, y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
0.682362
[ CPUFloatType{} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method may be preferable when one and the same algorithm should be applied to more than one pair of tensors.&lt;/p&gt;
&lt;h2 id="optimizers"&gt;Optimizers&lt;/h2&gt;
&lt;p&gt;So far, we’ve been updating model parameters following a simple strategy: The gradients told us which direction on the loss curve was downward; the learning rate told us how big of a step to take. What we did was a straightforward implementation of &lt;em&gt;gradient descent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;However, optimization algorithms used in deep learning get a lot more sophisticated than that. Below, we’ll see how to replace our manual updates using &lt;code&gt;optim_adam()&lt;/code&gt;, &lt;code&gt;torch&lt;/code&gt;’s implementation of the Adam algorithm &lt;span class="citation"&gt;(Kingma and Ba 2017)&lt;/span&gt;. First though, let’s take a quick look at how &lt;code&gt;torch&lt;/code&gt; optimizers work.&lt;/p&gt;
&lt;p&gt;Here is a very simple network, consisting of just one linear layer, to be called on a single data point.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;data &amp;lt;- torch_randn(1, 3)

model &amp;lt;- nn_linear(3, 1)
model$parameters&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$weight
torch_tensor 
-0.0385  0.1412 -0.5436
[ CPUFloatType{1,3} ]

$bias
torch_tensor 
-0.1950
[ CPUFloatType{1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we create an optimizer, we tell it what parameters it is supposed to work on.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimizer &amp;lt;- optim_adam(model$parameters, lr = 0.01)
optimizer&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;optim_adam&amp;gt;
  Inherits from: &amp;lt;torch_Optimizer&amp;gt;
  Public:
    add_param_group: function (param_group) 
    clone: function (deep = FALSE) 
    defaults: list
    initialize: function (params, lr = 0.001, betas = c(0.9, 0.999), eps = 1e-08, 
    param_groups: list
    state: list
    step: function (closure = NULL) 
    zero_grad: function () &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At any time, we can inspect those parameters:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimizer$param_groups[[1]]$params&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$weight
torch_tensor 
-0.0385  0.1412 -0.5436
[ CPUFloatType{1,3} ]

$bias
torch_tensor 
-0.1950
[ CPUFloatType{1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we perform the forward and backward passes. The backward pass calculates the gradients, but does &lt;em&gt;not&lt;/em&gt; update the parameters, as we can see both from the model &lt;em&gt;and&lt;/em&gt; the optimizer objects:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;out &amp;lt;- model(data)
out$backward()

optimizer$param_groups[[1]]$params
model$parameters&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$weight
torch_tensor 
-0.0385  0.1412 -0.5436
[ CPUFloatType{1,3} ]

$bias
torch_tensor 
-0.1950
[ CPUFloatType{1} ]

$weight
torch_tensor 
-0.0385  0.1412 -0.5436
[ CPUFloatType{1,3} ]

$bias
torch_tensor 
-0.1950
[ CPUFloatType{1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling &lt;code&gt;step()&lt;/code&gt; on the optimizer actually &lt;em&gt;performs&lt;/em&gt; the updates. Again, let’s check that both model and optimizer now hold the updated values:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimizer$step()

optimizer$param_groups[[1]]$params
model$parameters&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NULL
$weight
torch_tensor 
-0.0285  0.1312 -0.5536
[ CPUFloatType{1,3} ]

$bias
torch_tensor 
-0.2050
[ CPUFloatType{1} ]

$weight
torch_tensor 
-0.0285  0.1312 -0.5536
[ CPUFloatType{1,3} ]

$bias
torch_tensor 
-0.2050
[ CPUFloatType{1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we perform optimization in a loop, we need to make sure to call &lt;code&gt;optimizer$zero_grad()&lt;/code&gt; on every step, as otherwise gradients would be accumulated. You can see this in our final version of the network.&lt;/p&gt;
&lt;h2 id="simple-network-final-version"&gt;Simple network: final version&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(torch)

### generate training data -----------------------------------------------------

# input dimensionality (number of input features)
d_in &amp;lt;- 3
# output dimensionality (number of predicted features)
d_out &amp;lt;- 1
# number of observations in training set
n &amp;lt;- 100


# create random data
x &amp;lt;- torch_randn(n, d_in)
y &amp;lt;- x[, 1, NULL] * 0.2 - x[, 2, NULL] * 1.3 - x[, 3, NULL] * 0.5 + torch_randn(n, 1)



### define the network ---------------------------------------------------------

# dimensionality of hidden layer
d_hidden &amp;lt;- 32

model &amp;lt;- nn_sequential(
  nn_linear(d_in, d_hidden),
  nn_relu(),
  nn_linear(d_hidden, d_out)
)

### network parameters ---------------------------------------------------------

# for adam, need to choose a much higher learning rate in this problem
learning_rate &amp;lt;- 0.08

optimizer &amp;lt;- optim_adam(model$parameters, lr = learning_rate)

### training loop --------------------------------------------------------------

for (t in 1:200) {
  
  ### -------- Forward pass -------- 
  
  y_pred &amp;lt;- model(x)
  
  ### -------- compute loss -------- 
  loss &amp;lt;- nnf_mse_loss(y_pred, y, reduction = &amp;quot;sum&amp;quot;)
  if (t %% 10 == 0)
    cat(&amp;quot;Epoch: &amp;quot;, t, &amp;quot;   Loss: &amp;quot;, loss$item(), &amp;quot;\n&amp;quot;)
  
  ### -------- Backpropagation -------- 
  
  # Still need to zero out the gradients before the backward pass, only this time,
  # on the optimizer object
  optimizer$zero_grad()
  
  # gradients are still computed on the loss tensor (no change here)
  loss$backward()
  
  ### -------- Update weights -------- 
  
  # use the optimizer to update model parameters
  optimizer$step()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! We’ve seen all the major actors on stage: tensors, &lt;em&gt;autograd&lt;/em&gt;, modules, loss functions, and optimizers. In future posts, we’ll explore how to use &lt;em&gt;torch&lt;/em&gt; for standard deep learning tasks involving images, text, tabular data, and more. Thanks for reading!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id="refs" class="references csl-bib-body hanging-indent"&gt;
&lt;div id="ref-kingma2017adam" class="csl-entry"&gt;
Kingma, Diederik P., and Jimmy Ba. 2017. &lt;span&gt;“Adam: A Method for Stochastic Optimization.”&lt;/span&gt; &lt;a href="http://arxiv.org/abs/1412.6980"&gt;http://arxiv.org/abs/1412.6980&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;directed acyclic graph&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The prefix &lt;code&gt;nnf_&lt;/code&gt; was chosen because in PyTorch, the corresponding functions live in &lt;a href="https://pytorch.org/docs/stable/nn.functional.html"&gt;torch.nn.functional&lt;/a&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;This time, the corresponding PyTorch module is &lt;a href="https://pytorch.org/docs/stable/nn.html"&gt;torch.nn&lt;/a&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">36d30c81f9e7940880a94bc0db25151b</distill:md5>
      <category>Torch</category>
      <category>R</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-10-09-torch-optim</guid>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-10-09-torch-optim/images/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Using torch modules</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-10-07-torch-modules</link>
      <description>


&lt;p&gt;&lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-01-torch-network-from-scratch"&gt;Initially&lt;/a&gt;, we started learning about &lt;code&gt;torch&lt;/code&gt; basics by coding a simple neural network from scratch, making use of just a single of &lt;code&gt;torch&lt;/code&gt;’s features: &lt;em&gt;tensors&lt;/em&gt;. &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-05-torch-network-with-autograd"&gt;Then&lt;/a&gt;, we immensely simplified the task, replacing manual backpropagation with &lt;em&gt;autograd&lt;/em&gt;. Today, we &lt;em&gt;modularize&lt;/em&gt; the network - in both the habitual and a very literal sense: Low-level matrix operations are swapped out for &lt;code&gt;torch&lt;/code&gt; &lt;code&gt;module&lt;/code&gt;s.&lt;/p&gt;
&lt;h2 id="modules"&gt;Modules&lt;/h2&gt;
&lt;p&gt;From other frameworks (Keras, say), you may be used to distinguishing between &lt;em&gt;models&lt;/em&gt; and &lt;em&gt;layers&lt;/em&gt;. In &lt;code&gt;torch&lt;/code&gt;, both are instances of &lt;code&gt;nn_Module()&lt;/code&gt;, and thus, have some methods in common. For those thinking in terms of “models” and “layers”, I’m artificially splitting up this section into two parts. In reality though, there is no dichotomy: New modules may be composed of existing ones up to arbitrary levels of recursion.&lt;/p&gt;
&lt;h3 id="base-modules-layers"&gt;Base modules (“layers”)&lt;/h3&gt;
&lt;p&gt;Instead of writing out an affine operation by hand – &lt;code&gt;x$mm(w1) + b1&lt;/code&gt;, say –, as we’ve been doing so far, we can create a linear module. The following snippet instantiates a linear layer that expects three-feature inputs and returns a single output per observation:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(torch)
l &amp;lt;- nn_linear(3, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The module has two parameters, “weight” and “bias”. Both now come pre-initialized:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;l$parameters&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$weight
torch_tensor 
-0.0385  0.1412 -0.5436
[ CPUFloatType{1,3} ]

$bias
torch_tensor 
-0.1950
[ CPUFloatType{1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modules are callable; calling a module executes its &lt;code&gt;forward()&lt;/code&gt; method, which, for a linear layer, matrix-multiplies input and weights, and adds the bias.&lt;/p&gt;
&lt;p&gt;Let’s try this:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;data  &amp;lt;- torch_randn(10, 3)
out &amp;lt;- l(data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unsurprisingly, &lt;code&gt;out&lt;/code&gt; now holds some data:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;out$data()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
 0.2711
-1.8151
-0.0073
 0.1876
-0.0930
 0.7498
-0.2332
-0.0428
 0.3849
-0.2618
[ CPUFloatType{10,1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition though, this tensor knows what will need to be done, should ever it be asked to calculate gradients:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;out$grad_fn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;AddmmBackward&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the difference between tensors returned by modules and self-created ones. When creating tensors ourselves, we need to pass &lt;code&gt;requires_grad = TRUE&lt;/code&gt; to trigger gradient calculation. With modules, &lt;code&gt;torch&lt;/code&gt; correctly assumes that we’ll want to perform backpropagation at some point.&lt;/p&gt;
&lt;p&gt;By now though, we haven’t called &lt;code&gt;backward()&lt;/code&gt; yet. Thus, no gradients have yet been computed:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;l$weight$grad
l$bias$grad&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
[ Tensor (undefined) ]
torch_tensor 
[ Tensor (undefined) ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s change this:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;out$backward()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in (function (self, gradient, keep_graph, create_graph)  : 
  grad can be implicitly created only for scalar outputs (_make_grads at ../torch/csrc/autograd/autograd.cpp:47)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why the error? &lt;em&gt;Autograd&lt;/em&gt; expects the output tensor to be a scalar, while in our example, we have a tensor of size &lt;code&gt;(10, 1)&lt;/code&gt;. This error won’t often occur in practice, where we work with &lt;em&gt;batches&lt;/em&gt; of inputs (sometimes, just a single batch). But still, it’s interesting to see how to resolve this.&lt;/p&gt;
&lt;p&gt;To make the example work, we introduce a – virtual – final aggregation step – taking the mean, say. Let’s call it &lt;code&gt;avg&lt;/code&gt;. If such a mean were taken, its gradient with respect to &lt;code&gt;l$weight&lt;/code&gt; would be obtained via the chain rule:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\begin{equation*} 
 \frac{\partial \ avg}{\partial w} = \frac{\partial \ avg}{\partial \ out}  \ \frac{\partial \ out}{\partial w}
\end{equation*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Of the quantities on the right side, we’re interested in the second. We need to provide the first one, the way it would look &lt;em&gt;if really we were taking the mean&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;d_avg_d_out &amp;lt;- torch_tensor(10)$`repeat`(10)$unsqueeze(1)$t()
out$backward(gradient = d_avg_d_out)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;l$weight$grad&lt;/code&gt; and &lt;code&gt;l$bias$grad&lt;/code&gt; &lt;em&gt;do&lt;/em&gt; contain gradients:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;l$weight$grad
l$bias$grad&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
 1.3410  6.4343 -30.7135
[ CPUFloatType{1,3} ]
torch_tensor 
 100
[ CPUFloatType{1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to &lt;code&gt;nn_linear()&lt;/code&gt; , &lt;code&gt;torch&lt;/code&gt; provides pretty much all the common layers you might hope for. But few tasks are solved by a single layer. How do you combine them? Or, in the usual lingo: How do you build &lt;em&gt;models&lt;/em&gt;?&lt;/p&gt;
&lt;h3 id="container-modules-models"&gt;Container modules (“models”)&lt;/h3&gt;
&lt;p&gt;Now, &lt;em&gt;models&lt;/em&gt; are just modules that contain other modules. For example, if all inputs are supposed to flow through the same nodes and along the same edges, then &lt;code&gt;nn_sequential()&lt;/code&gt; can be used to build a simple graph.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model &amp;lt;- nn_sequential(
    nn_linear(3, 16),
    nn_relu(),
    nn_linear(16, 1)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the same technique as above to get an overview of all model parameters (two weight matrices and two bias vectors):&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model$parameters&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$`0.weight`
torch_tensor 
-0.1968 -0.1127 -0.0504
 0.0083  0.3125  0.0013
 0.4784 -0.2757  0.2535
-0.0898 -0.4706 -0.0733
-0.0654  0.5016  0.0242
 0.4855 -0.3980 -0.3434
-0.3609  0.1859 -0.4039
 0.2851  0.2809 -0.3114
-0.0542 -0.0754 -0.2252
-0.3175  0.2107 -0.2954
-0.3733  0.3931  0.3466
 0.5616 -0.3793 -0.4872
 0.0062  0.4168 -0.5580
 0.3174 -0.4867  0.0904
-0.0981 -0.0084  0.3580
 0.3187 -0.2954 -0.5181
[ CPUFloatType{16,3} ]

$`0.bias`
torch_tensor 
-0.3714
 0.5603
-0.3791
 0.4372
-0.1793
-0.3329
 0.5588
 0.1370
 0.4467
 0.2937
 0.1436
 0.1986
 0.4967
 0.1554
-0.3219
-0.0266
[ CPUFloatType{16} ]

$`2.weight`
torch_tensor 
Columns 1 to 10-0.0908 -0.1786  0.0812 -0.0414 -0.0251 -0.1961  0.2326  0.0943 -0.0246  0.0748

Columns 11 to 16 0.2111 -0.1801 -0.0102 -0.0244  0.1223 -0.1958
[ CPUFloatType{1,16} ]

$`2.bias`
torch_tensor 
 0.2470
[ CPUFloatType{1} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To inspect an individual parameter, make use of its position in the sequential model. For example:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model[[1]]$bias&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
-0.3714
 0.5603
-0.3791
 0.4372
-0.1793
-0.3329
 0.5588
 0.1370
 0.4467
 0.2937
 0.1436
 0.1986
 0.4967
 0.1554
-0.3219
-0.0266
[ CPUFloatType{16} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And just like &lt;code&gt;nn_linear()&lt;/code&gt; above, this module can be called directly on data:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;out &amp;lt;- model(data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On a composite module like this one, calling &lt;code&gt;backward()&lt;/code&gt; will backpropagate through all the layers:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;out$backward(gradient = torch_tensor(10)$`repeat`(10)$unsqueeze(1)$t())

# e.g.
model[[1]]$bias$grad&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
  0.0000
-17.8578
  1.6246
 -3.7258
 -0.2515
 -5.8825
 23.2624
  8.4903
 -2.4604
  6.7286
 14.7760
-14.4064
 -1.0206
 -1.7058
  0.0000
 -9.7897
[ CPUFloatType{16} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And placing the composite module on the GPU will move all tensors there:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;model$cuda()
model[[1]]$bias$grad&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
  0.0000
-17.8578
  1.6246
 -3.7258
 -0.2515
 -5.8825
 23.2624
  8.4903
 -2.4604
  6.7286
 14.7760
-14.4064
 -1.0206
 -1.7058
  0.0000
 -9.7897
[ CUDAFloatType{16} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s see how using &lt;code&gt;nn_sequential()&lt;/code&gt; can simplify our example network.&lt;/p&gt;
&lt;h2 id="simple-network-using-modules"&gt;Simple network using modules&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;### generate training data -----------------------------------------------------

# input dimensionality (number of input features)
d_in &amp;lt;- 3
# output dimensionality (number of predicted features)
d_out &amp;lt;- 1
# number of observations in training set
n &amp;lt;- 100


# create random data
x &amp;lt;- torch_randn(n, d_in)
y &amp;lt;- x[, 1, NULL] * 0.2 - x[, 2, NULL] * 1.3 - x[, 3, NULL] * 0.5 + torch_randn(n, 1)


### define the network ---------------------------------------------------------

# dimensionality of hidden layer
d_hidden &amp;lt;- 32

model &amp;lt;- nn_sequential(
  nn_linear(d_in, d_hidden),
  nn_relu(),
  nn_linear(d_hidden, d_out)
)

### network parameters ---------------------------------------------------------

learning_rate &amp;lt;- 1e-4

### training loop --------------------------------------------------------------

for (t in 1:200) {
  
  ### -------- Forward pass -------- 
  
  y_pred &amp;lt;- model(x)
  
  ### -------- compute loss -------- 
  loss &amp;lt;- (y_pred - y)$pow(2)$sum()
  if (t %% 10 == 0)
    cat(&amp;quot;Epoch: &amp;quot;, t, &amp;quot;   Loss: &amp;quot;, loss$item(), &amp;quot;\n&amp;quot;)
  
  ### -------- Backpropagation -------- 
  
  # Zero the gradients before running the backward pass.
  model$zero_grad()
  
  # compute gradient of the loss w.r.t. all learnable parameters of the model
  loss$backward()
  
  ### -------- Update weights -------- 
  
  # Wrap in with_no_grad() because this is a part we DON&amp;#39;T want to record
  # for automatic gradient computation
  # Update each parameter by its `grad`
  
  with_no_grad({
    model$parameters %&amp;gt;% purrr::walk(function(param) param$sub_(learning_rate * param$grad))
  })
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The forward pass looks a lot better now; however, we still loop through the model’s parameters and update each one by hand. Furthermore, you may be already be suspecting that &lt;code&gt;torch&lt;/code&gt; provides abstractions for common loss functions. In the next and last installment of this series, we’ll address both points, making use of &lt;code&gt;torch&lt;/code&gt; losses and optimizers. See you then!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">89db528ec58a4b4da856d3b6eea438b7</distill:md5>
      <category>Torch</category>
      <category>R</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-10-07-torch-modules</guid>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-10-07-torch-modules/images/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Introducing torch autograd</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-10-05-torch-network-with-autograd</link>
      <description>


&lt;p&gt;Last week, we saw how to code &lt;a href="https://blogs.rstudio.com/ai/posts/2020-10-01-torch-network-from-scratch"&gt;a simple network from scratch&lt;/a&gt;, using nothing but &lt;code&gt;torch&lt;/code&gt; &lt;em&gt;tensors&lt;/em&gt;. Predictions, loss, gradients, weight updates – all these things we’ve been computing ourselves. Today, we make a significant change: Namely, we spare ourselves the cumbersome calculation of gradients, and have &lt;code&gt;torch&lt;/code&gt; do it for us.&lt;/p&gt;
&lt;p&gt;Prior to that though, let’s get some background.&lt;/p&gt;
&lt;h2 id="automatic-differentiation-with-autograd"&gt;Automatic differentiation with &lt;em&gt;autograd&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;torch&lt;/code&gt; uses a module called &lt;em&gt;autograd&lt;/em&gt; to&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;record operations performed on tensors, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;store what will have to be done to obtain the corresponding gradients, once we’re entering the backward pass.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These prospective actions are stored internally as functions, and when it’s time to compute the gradients, these functions are applied in order: Application starts from the output node, and calculated gradients are successively &lt;em&gt;propagated&lt;/em&gt; &lt;em&gt;back&lt;/em&gt; through the network. This is a form of &lt;em&gt;reverse mode automatic differentiation&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id="autograd-basics"&gt;&lt;em&gt;Autograd&lt;/em&gt; basics&lt;/h4&gt;
&lt;p&gt;As users, we can see a bit of the implementation. As a prerequisite for this “recording” to happen, tensors have to be created with &lt;code&gt;requires_grad = TRUE&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(torch)

x &amp;lt;- torch_ones(2, 2, requires_grad = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be clear, &lt;code&gt;x&lt;/code&gt; now is a tensor &lt;em&gt;with respect to which&lt;/em&gt; gradients have to be calculated – normally, a tensor representing a weight or a bias, not the input data &lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. If we subsequently perform some operation on that tensor, assigning the result to &lt;code&gt;y&lt;/code&gt;,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;y &amp;lt;- x$mean()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we find that &lt;code&gt;y&lt;/code&gt; now has a non-empty &lt;code&gt;grad_fn&lt;/code&gt; that tells &lt;code&gt;torch&lt;/code&gt; how to compute the gradient of &lt;code&gt;y&lt;/code&gt; with respect to &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;y$grad_fn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;MeanBackward0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actual &lt;em&gt;computation&lt;/em&gt; of gradients is triggered by calling &lt;code&gt;backward()&lt;/code&gt; on the output tensor.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;y$backward()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After &lt;code&gt;backward()&lt;/code&gt; has been called, &lt;code&gt;x&lt;/code&gt; has a non-null field termed &lt;code&gt;grad&lt;/code&gt; that stores the gradient of &lt;code&gt;y&lt;/code&gt; with respect to &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x$grad&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
 0.2500  0.2500
 0.2500  0.2500
[ CPUFloatType{2,2} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With longer chains of computations, we can take a glance at how &lt;code&gt;torch&lt;/code&gt; builds up a graph of backward operations. Here is a slightly more complex example – feel free to skip if you’re not the type who just &lt;em&gt;has&lt;/em&gt; to peek into things for them to make sense.&lt;/p&gt;
&lt;h4 id="digging-deeper"&gt;Digging deeper&lt;/h4&gt;
&lt;p&gt;We build up a simple graph of tensors, with inputs &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; being connected to output &lt;code&gt;out&lt;/code&gt; by intermediaries &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x1 &amp;lt;- torch_ones(2, 2, requires_grad = TRUE)
x2 &amp;lt;- torch_tensor(1.1, requires_grad = TRUE)

y &amp;lt;- x1 * (x2 + 2)

z &amp;lt;- y$pow(2) * 3

out &amp;lt;- z$mean()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To save memory, intermediate gradients are normally not being stored. Calling &lt;code&gt;retain_grad()&lt;/code&gt; on a tensor allows one to deviate from this default. Let’s do this here, for the sake of demonstration:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;y$retain_grad()

z$retain_grad()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can go backwards through the graph and inspect &lt;code&gt;torch&lt;/code&gt;’s action plan for backprop, starting from &lt;code&gt;out$grad_fn&lt;/code&gt;, like so:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# how to compute the gradient for mean, the last operation executed
out$grad_fn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;MeanBackward0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# how to compute the gradient for the multiplication by 3 in z = y.pow(2) * 3
out$grad_fn$next_functions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
MulBackward1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# how to compute the gradient for pow in z = y.pow(2) * 3
out$grad_fn$next_functions[[1]]$next_functions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
PowBackward0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# how to compute the gradient for the multiplication in y = x * (x + 2)
out$grad_fn$next_functions[[1]]$next_functions[[1]]$next_functions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
MulBackward0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# how to compute the gradient for the two branches of y = x * (x + 2),
# where the left branch is a leaf node (AccumulateGrad for x1)
out$grad_fn$next_functions[[1]]$next_functions[[1]]$next_functions[[1]]$next_functions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
torch::autograd::AccumulateGrad
[[2]]
AddBackward1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# here we arrive at the other leaf node (AccumulateGrad for x2)
out$grad_fn$next_functions[[1]]$next_functions[[1]]$next_functions[[1]]$next_functions[[2]]$next_functions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
torch::autograd::AccumulateGrad&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we now call &lt;code&gt;out$backward()&lt;/code&gt;, all tensors in the graph will have their respective gradients calculated.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;out$backward()

z$grad
y$grad
x2$grad
x1$grad&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;torch_tensor 
 0.2500  0.2500
 0.2500  0.2500
[ CPUFloatType{2,2} ]
torch_tensor 
 4.6500  4.6500
 4.6500  4.6500
[ CPUFloatType{2,2} ]
torch_tensor 
 18.6000
[ CPUFloatType{1} ]
torch_tensor 
 14.4150  14.4150
 14.4150  14.4150
[ CPUFloatType{2,2} ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this nerdy excursion, let’s see how &lt;em&gt;autograd&lt;/em&gt; makes our network simpler.&lt;/p&gt;
&lt;h2 id="the-simple-network-now-using-autograd"&gt;The simple network, now using &lt;em&gt;autograd&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;em&gt;autograd&lt;/em&gt;, we say good-bye to the tedious, error-prone process of coding backpropagation ourselves. A single method call does it all: &lt;code&gt;loss$backward()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;torch&lt;/code&gt; keeping track of operations as required, we don’t even have to explicitly name the intermediate tensors any more. We can code forward pass, loss calculation, and backward pass in just three lines:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;y_pred &amp;lt;- x$mm(w1)$add(b1)$clamp(min = 0)$mm(w2)$add(b2)
  
loss &amp;lt;- (y_pred - y)$pow(2)$sum()

loss$backward()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the complete code. We’re at an intermediate stage: We still manually compute the forward pass and the loss, and we still manually update the weights. Due to the latter, there is something I need to explain. But I’ll let you check out the new version first:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(torch)

### generate training data -----------------------------------------------------

# input dimensionality (number of input features)
d_in &amp;lt;- 3
# output dimensionality (number of predicted features)
d_out &amp;lt;- 1
# number of observations in training set
n &amp;lt;- 100


# create random data
x &amp;lt;- torch_randn(n, d_in)
y &amp;lt;- x[, 1, NULL] * 0.2 - x[, 2, NULL] * 1.3 - x[, 3, NULL] * 0.5 + torch_randn(n, 1)


### initialize weights ---------------------------------------------------------

# dimensionality of hidden layer
d_hidden &amp;lt;- 32
# weights connecting input to hidden layer
w1 &amp;lt;- torch_randn(d_in, d_hidden, requires_grad = TRUE)
# weights connecting hidden to output layer
w2 &amp;lt;- torch_randn(d_hidden, d_out, requires_grad = TRUE)

# hidden layer bias
b1 &amp;lt;- torch_zeros(1, d_hidden, requires_grad = TRUE)
# output layer bias
b2 &amp;lt;- torch_zeros(1, d_out, requires_grad = TRUE)

### network parameters ---------------------------------------------------------

learning_rate &amp;lt;- 1e-4

### training loop --------------------------------------------------------------

for (t in 1:200) {
  ### -------- Forward pass --------
  
  y_pred &amp;lt;- x$mm(w1)$add(b1)$clamp(min = 0)$mm(w2)$add(b2)
  
  ### -------- compute loss -------- 
  loss &amp;lt;- (y_pred - y)$pow(2)$sum()
  if (t %% 10 == 0)
    cat(&amp;quot;Epoch: &amp;quot;, t, &amp;quot;   Loss: &amp;quot;, loss$item(), &amp;quot;\n&amp;quot;)
  
  ### -------- Backpropagation --------
  
  # compute gradient of loss w.r.t. all tensors with requires_grad = TRUE
  loss$backward()
  
  ### -------- Update weights -------- 
  
  # Wrap in with_no_grad() because this is a part we DON&amp;#39;T 
  # want to record for automatic gradient computation
   with_no_grad({
     w1 &amp;lt;- w1$sub_(learning_rate * w1$grad)
     w2 &amp;lt;- w2$sub_(learning_rate * w2$grad)
     b1 &amp;lt;- b1$sub_(learning_rate * b1$grad)
     b2 &amp;lt;- b2$sub_(learning_rate * b2$grad)  
     
     # Zero gradients after every pass, as they&amp;#39;d accumulate otherwise
     w1$grad$zero_()
     w2$grad$zero_()
     b1$grad$zero_()
     b2$grad$zero_()  
   })

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As explained above, after &lt;code&gt;some_tensor$backward()&lt;/code&gt;, all tensors preceding it in the graph&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; will have their &lt;code&gt;grad&lt;/code&gt; fields populated. We make use of these fields to update the weights. But now that &lt;em&gt;autograd&lt;/em&gt; is “on”, whenever we execute an operation we &lt;em&gt;don’t&lt;/em&gt; want recorded for backprop, we need to explicitly exempt it: This is why we wrap the weight updates in a call to &lt;code&gt;with_no_grad()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While this is something you may file under “nice to know” – after all, once we arrive at the last post in the series, this manual updating of weights will be gone – the idiom of &lt;em&gt;zeroing gradients&lt;/em&gt; is here to stay: Values stored in &lt;code&gt;grad&lt;/code&gt; fields accumulate; whenever we’re done using them, we need to zero them out before reuse.&lt;/p&gt;
&lt;h2 id="outlook"&gt;Outlook&lt;/h2&gt;
&lt;p&gt;So where do we stand? We started out coding a network completely from scratch, making use of nothing but &lt;code&gt;torch&lt;/code&gt; tensors. Today, we got significant help from &lt;em&gt;autograd&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But we’re still manually updating the weights, – and aren’t deep learning frameworks known to provide abstractions (“layers”, or: “modules”) on top of tensor computations …?&lt;/p&gt;
&lt;p&gt;We address both issues in the follow-up installments. Thanks for reading!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Unless we &lt;em&gt;want&lt;/em&gt; to change the data, as when generating adversarial examples.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;All that have &lt;code&gt;requires_grad&lt;/code&gt; set to &lt;code&gt;TRUE&lt;/code&gt;, to be precise.&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5 xmlns:distill="https://distill.pub/journal/">68b4457f4594ac1a742e88e6d9c790b4</distill:md5>
      <category>Torch</category>
      <category>R</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-10-05-torch-network-with-autograd</guid>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-10-05-torch-network-with-autograd/images/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Getting familiar with torch tensors</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-10-01-torch-network-from-scratch</link>
      <description>In this first installment of a four-part miniseries, we present the main things you will want to know about torch tensors. As an illustrative example, we'll code a simple neural network from scratch.</description>
      <category>Torch</category>
      <category>R</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-10-01-torch-network-from-scratch</guid>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-10-01-torch-network-from-scratch/images/pic.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>sparklyr 1.4: Weighted Sampling, Tidyr Verbs, Robust Scaler, RAPIDS, and more</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yitao Li</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-09-30-sparklyr-1.4.0-released</link>
      <description>Sparklyr 1.4 is now available! This release comes with delightful new features such as weighted sampling and tidyr verbs support for Spark dataframes, robust scaler for standardizing data based on median and interquartile range, spark_connect interface for RAPIDS GPU acceleration plugin, as well as a number of dplyr-related improvements.</description>
      <category>R</category>
      <category>Packages/Releases</category>
      <category>Distributed Computing</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-09-30-sparklyr-1.4.0-released</guid>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-09-30-sparklyr-1.4.0-released/images/sparklyr-1.4.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Please allow me to introduce myself: Torch for R</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-09-29-introducing-torch-for-r</link>
      <description>Today, we are excited to introduce torch, an R package that allows you to use PyTorch-like functionality natively from R. No Python installation is required: torch is built directly on top of libtorch, a C++ library that provides the tensor-computation and automatic-differentiation capabilities essential to building neural networks.</description>
      <category>Packages/Releases</category>
      <category>Torch</category>
      <category>R</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-09-29-introducing-torch-for-r</guid>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-09-29-introducing-torch-for-r/images/pt.png" medium="image" type="image/png" width="919" height="264"/>
    </item>
    <item>
      <title>Introducing sparklyr.flint: A time-series extension for sparklyr</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yitao Li</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-09-07-sparklyr-flint</link>
      <description>We are pleased to announce that sparklyr.flint, a sparklyr extension for analyzing time series at scale with Flint, is now available on CRAN. Flint is an open-source library for working with time-series in Apache Spark which supports aggregates and joins on time-series datasets.</description>
      <category>R</category>
      <category>Time Series</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-09-07-sparklyr-flint</guid>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-09-07-sparklyr-flint/images/thumb.png" medium="image" type="image/png" width="126" height="77"/>
    </item>
    <item>
      <title>An introduction to weather forecasting with deep learning</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-09-01-weather-prediction</link>
      <description>A few weeks ago, we showed how to forecast chaotic dynamical systems with deep learning, augmented by a custom constraint derived from domain-specific insight. Global weather is a chaotic system, but of much higher complexity than many tasks commonly addressed with machine and/or deep learning. In this post, we provide a practical introduction featuring a simple deep learning baseline for atmospheric forecasting. While far away from being competitive, it serves to illustrate how more sophisticated and compute-intensive models may approach that formidable task by means of methods situated on the "black-box end" of the continuum.</description>
      <category>R</category>
      <category>TensorFlow/Keras</category>
      <category>Time Series</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-09-01-weather-prediction</guid>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-09-01-weather-prediction/images/thumb.png" medium="image" type="image/png" width="600" height="332"/>
    </item>
    <item>
      <title>Training ImageNet with R</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Javier Luraschi</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-08-24-training-imagenet-with-r</link>
      <description>This post explores how to train large datasets with TensorFlow and R. Specifically, we present how to download and repartition ImageNet, followed by training ImageNet across multiple GPUs in distributed environments using TensorFlow and Apache Spark.</description>
      <category>R</category>
      <category>TensorFlow/Keras</category>
      <category>Distributed Computing</category>
      <category>Data Management</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-08-24-training-imagenet-with-r</guid>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-08-24-training-imagenet-with-r/images/fishing-net.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>FNN-VAE for noisy time series forecasting</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-07-31-fnn-vae-for-noisy-timeseries</link>
      <description>In the last part of this mini-series on forecasting with false nearest neighbors (FNN) loss, we replace the LSTM autoencoder from the previous post by a convolutional VAE, resulting in equivalent prediction performance but significantly lower training time. In addition, we find that FNN regularization is of great help when an underlying deterministic process is obscured by substantial noise.</description>
      <category>R</category>
      <category>TensorFlow/Keras</category>
      <category>Time Series</category>
      <category>Unsupervised Learning</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-07-31-fnn-vae-for-noisy-timeseries</guid>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-07-31-fnn-vae-for-noisy-timeseries/images/kb.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Time series prediction with FNN-LSTM</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-07-20-fnn-lstm</link>
      <description>In a recent post, we showed how an LSTM autoencoder, regularized by false nearest neighbors (FNN) loss, can be used to reconstruct the attractor of a nonlinear, chaotic dynamical system. Here, we explore how that same technique assists in prediction. Matched up with a comparable, capacity-wise, "vanilla LSTM", FNN-LSTM improves performance on a set of very different, real-world datasets, especially for the initial steps in a multi-step forecast.</description>
      <category>R</category>
      <category>TensorFlow/Keras</category>
      <category>Time Series</category>
      <category>Unsupervised Learning</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-07-20-fnn-lstm</guid>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-07-20-fnn-lstm/images/old_faithful.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Deep attractors: Where deep learning meets chaos</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-06-24-deep-attractors</link>
      <description>In nonlinear dynamics, when the state space is thought to be multidimensional but all we have for data is just a univariate time series, one may attempt to reconstruct the true space via delay coordinate embeddings. However, it is not clear a priori how to choose dimensionality and time lag of the reconstruction space. In this post, we show how to use an autoencoder architecture to circumvent the problem: Given just a scalar series of observations, the autoencoder directly learns to represent attractors of chaotic systems in adequate dimensionality.</description>
      <category>R</category>
      <category>TensorFlow/Keras</category>
      <category>Time Series</category>
      <category>Unsupervised Learning</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-06-24-deep-attractors</guid>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-06-24-deep-attractors/images/x_z.gif" medium="image" type="image/gif"/>
    </item>
    <item>
      <title>Easy PixelCNN with tfprobability</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-05-29-pixelcnn</link>
      <description>PixelCNN is a deep learning architecture - or bundle of architectures - designed to generate highly realistic-looking images. To use it, no reverse-engineering of arXiv papers or search for reference implementations is required: TensorFlow Probability and its R wrapper, tfprobability, now include a PixelCNN distribution that can be used to train a straightforwardly-defined neural network in a parameterizable way.</description>
      <category>R</category>
      <category>Image Recognition &amp; Image Processing</category>
      <category>TensorFlow/Keras</category>
      <category>Probabilistic ML/DL</category>
      <category>Unsupervised Learning</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-05-29-pixelcnn</guid>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-05-29-pixelcnn/images/thumb.png" medium="image" type="image/png" width="400" height="203"/>
    </item>
    <item>
      <title>Hacking deep learning: model inversion attack by example</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-05-15-model-inversion-attacks</link>
      <description>Compared to other applications, deep learning models might not seem too likely as victims of privacy attacks. However, methods exist to determine whether an entity was used in the training set (an adversarial attack called member inference), and techniques subsumed under "model inversion" allow to reconstruct raw data input given just model output (and sometimes, context information). This post shows an end-to-end example of model inversion, and explores mitigation strategies using TensorFlow Privacy.</description>
      <category>R</category>
      <category>Privacy &amp; Security</category>
      <category>TensorFlow/Keras</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-05-15-model-inversion-attacks</guid>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-05-15-model-inversion-attacks/images/results.png" medium="image" type="image/png" width="600" height="394"/>
    </item>
    <item>
      <title>Towards privacy: Encrypted deep learning with Syft and Keras</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigrid Keydana</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-04-29-encrypted_keras_with_syft</link>
      <description>Deep learning need not be irreconcilable with privacy protection. Federated learning enables on-device, distributed model training; encryption keeps model and gradient updates private; differential privacy prevents the training data from leaking. As of today, private and secure deep learning is an emerging technology. In this post, we introduce Syft, an open-source framework that integrates with PyTorch as well as TensorFlow. In an example use case, we obtain private predictions from a Keras model.</description>
      <category>R</category>
      <category>Privacy &amp; Security</category>
      <category>TensorFlow/Keras</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-04-29-encrypted_keras_with_syft</guid>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-04-29-encrypted_keras_with_syft/images/thumb.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>sparklyr 1.2: Foreach, Spark 3.0 and Databricks Connect</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yitao Li</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-04-21-sparklyr-1.2.0-released</link>
      <description>A new sparklyr release is now available. This sparklyr 1.2 release features new functionalities such as support for Databricks Connect, a Spark backend for the 'foreach' package, inter-op improvements for working with Spark 3.0 preview, as well as a number of bug fixes and improvements addressing user-visible pain points.</description>
      <category>R</category>
      <category>Packages/Releases</category>
      <category>Distributed Computing</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-04-21-sparklyr-1.2.0-released</guid>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-04-21-sparklyr-1.2.0-released/images/sparklyr.png" medium="image" type="image/png" width="1241" height="307"/>
    </item>
    <item>
      <title>pins 0.4: Versioning</title>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Javier Luraschi</dc:creator>
      <link>https://blogs.rstudio.com/tensorflow/posts/2020-04-13-pins-04</link>
      <description>A new release of pins is available on CRAN today. This release adds support to time travel across dataset versions, which improves collaboration and protects your code from breaking when remote resources change unexpectedly.</description>
      <category>R</category>
      <category>Packages/Releases</category>
      <category>Data Management</category>
      <guid>https://blogs.rstudio.com/tensorflow/posts/2020-04-13-pins-04</guid>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://blogs.rstudio.com/tensorflow/posts/2020-04-13-pins-04/images/thumb.jpg" medium="image" type="image/jpeg"/>
    </item>
  </channel>
</rss>
